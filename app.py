<h3 style="color: #ef4444; margin-bottom: 1.5rem;">üöÄ PR√ìXIMOS PASSOS</h3>
                    <p>1. Aprova√ß√£o de budget para interven√ß√µes</p>
                    <p>2. Task force multidisciplinar</p>
                    <p>3. Quick wins em 30 dias</p>
                    <p>4. Implementa√ß√£o de IA preditiva</p>
                    <p>5. Review trimestral de KPIs</p>
                </div>
            </div>
            
            <div style="
                text-align: center;
                margin-top: 3rem;
                padding: 2rem;
                background: rgba(255, 255, 255, 0.05);
                border-radius: 15px;
                border: 1px solid rgba(255, 255, 255, 0.1);
            ">
                <h3 style="color: white; margin-bottom: 1rem;">üí° RECOMENDA√á√ÉO ESTRAT√âGICA FINAL</h3>
                <p style="font-size: 1.1rem; color: rgba(255, 255, 255, 0.9); line-height: 1.6;">
                    Implementa√ß√£o de um <strong>programa integrado de gest√£o de absente√≠smo</strong> com foco em 
                    <span style="color: #8b5cf6;">preven√ß√£o inteligente</span>, 
                    <span style="color: #06b6d4;">comunica√ß√£o digital</span> e 
                    <span style="color: #10b981;">suporte proativo aos colaboradores</span>.
                </p>
                <div style="margin-top: 2rem; display: flex; justify-content: space-around; flex-wrap: wrap;">
                    <div style="text-align: center; margin: 1rem;">
                        <div style="font-size: 2rem; color: #10b981;">25-40%</div>
                        <div style="font-size: 0.9rem; opacity: 0.8;">Redu√ß√£o de Custos</div>
                    </div>
                    <div style="text-align: center; margin: 1rem;">
                        <div style="font-size: 2rem; color: #06b6d4;">6 meses</div>
                        <div style="font-size: 0.9rem; opacity: 0.8;">Payback Period</div>
                    </div>
                    <div style="text-align: center; margin: 1rem;">
                        <div style="font-size: 2rem; color: #8b5cf6;">280%</div>
                        <div style="font-size: 0.9rem; opacity: 0.8;">ROI Projetado</div>
                    </div>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # An√°lise competitiva final
        st.markdown("#### üèÜ **Posicionamento Competitivo & Market Intelligence**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Quadrante estrat√©gico
            quadrante_data = {
                'Empresa': ['Nossa Empresa', 'Concorrente A', 'Concorrente B', 'Concorrente C', 'L√≠der Mercado'],
                'Performance_HR': [metricas['score_rh'], 78, 65, 82, 94],
                'Inovacao_Tech': [85, 70, 60, 75, 95],
                'Tamanho': [15, 12, 8, 14, 20]
            }
            
            fig_quadrante = px.scatter(
                quadrante_data,
                x='Performance_HR',
                y='Inovacao_Tech',
                size='Tamanho',
                color='Empresa',
                title="Matriz de Posicionamento Competitivo",
                labels={'Performance_HR': 'Performance RH', 'Inovacao_Tech': 'Inova√ß√£o Tecnol√≥gica'},
                color_discrete_sequence=['#8b5cf6', '#f59e0b', '#ef4444', '#06b6d4', '#10b981']
            )
            
            # Adicionar quadrantes
            fig_quadrante.add_hline(y=80, line_dash="dash", line_color="rgba(255,255,255,0.3)")
            fig_quadrante.add_vline(x=80, line_dash="dash", line_color="rgba(255,255,255,0.3)")
            
            # Adicionar anota√ß√µes dos quadrantes
            fig_quadrante.add_annotation(x=90, y=90, text="L√çDERES", showarrow=False, font=dict(color="white", size=14))
            fig_quadrante.add_annotation(x=70, y=90, text="INOVADORES", showarrow=False, font=dict(color="white", size=14))
            fig_quadrante.add_annotation(x=90, y=70, text="ESPECIALISTAS", showarrow=False, font=dict(color="white", size=14))
            fig_quadrante.add_annotation(x=70, y=70, text="EMERGENTES", showarrow=False, font=dict(color="white", size=14))
            
            theme = create_ultra_plotly_theme()
            fig_quadrante.update_layout(**theme['layout'])
            fig_quadrante.update_layout(height=500)
            
            st.plotly_chart(fig_quadrante, use_container_width=True, config={'displayModeBar': False})
        
        with col2:
            # Radar comparativo final
            competencias_detalhadas = [
                'Gest√£o Aus√™ncias', 'Conformidade', 'Efici√™ncia Op.', 
                'Inova√ß√£o Tech', 'Satisfaction', 'Produtividade'
            ]
            
            nossa_performance = [
                100 - metricas['taxa_absenteismo'] * 10,
                metricas['taxa_justificacao'],
                min(100, metricas['score_rh'] + 10),
                85,  # Tech innovation score
                max(60, min(95, metricas['score_rh'] + random.randint(-5, 10))),
                100 - metricas['taxa_absenteismo'] * 15
            ]
            
            benchmark_mercado = [82, 75, 78, 70, 76, 85]
            top_quartil = [95, 89, 92, 88, 90, 94]
            
            fig_radar_final = go.Figure()
            
            fig_radar_final.add_trace(go.Scatterpolar(
                r=nossa_performance,
                theta=competencias_detalhadas,
                fill='toself',
                name='Nossa Performance',
                line=dict(color='#8b5cf6', width=3),
                fillcolor='rgba(139, 92, 246, 0.3)'
            ))
            
            fig_radar_final.add_trace(go.Scatterpolar(
                r=benchmark_mercado,
                theta=competencias_detalhadas,
                fill='toself',
                name='Benchmark Mercado',
                line=dict(color='#f59e0b', width=2, dash='dash'),
                fillcolor='rgba(245, 158, 11, 0.1)'
            ))
            
            fig_radar_final.add_trace(go.Scatterpolar(
                r=top_quartil,
                theta=competencias_detalhadas,
                fill='toself',
                name='Top 25% Mercado',
                line=dict(color='#10b981', width=2, dash='dot'),
                fillcolor='rgba(16, 185, 129, 0.1)'
            ))
            
            theme = create_ultra_plotly_theme()
            fig_radar_final.update_layout(**theme['layout'])
            fig_radar_final.update_layout(
                title="Performance 360¬∞ vs Mercado",
                height=500,
                polar=dict(
                    radialaxis=dict(
                        visible=True,
                        range=[0, 100],
                        gridcolor='rgba(255, 255, 255, 0.2)',
                        tickfont=dict(color='white', size=10)
                    ),
                    angularaxis=dict(
                        gridcolor='rgba(255, 255, 255, 0.2)',
                        tickfont=dict(color='white', size=10)
                    )
                )
            )
            
            st.plotly_chart(fig_radar_final, use_container_width=True, config={'displayModeBar': False})
    
    # Footer ultra-premium
    st.markdown("""
    <div style="
        background: linear-gradient(135deg, rgba(139, 92, 246, 0.1), rgba(6, 182, 212, 0.1));
        backdrop-filter: blur(20px);
        border: 2px solid rgba(255, 255, 255, 0.1);
        border-radius: 25px;
        padding: 4rem 3rem;
        margin-top: 5rem;
        text-align: center;
        color: white;
        position: relative;
        overflow: hidden;
    ">
        <div style="position: relative; z-index: 2;">
            <h2 style="
                font-family: 'Orbitron', monospace;
                font-size: 2.5rem;
                font-weight: 900;
                margin-bottom: 1rem;
                background: linear-gradient(135deg, #ffffff, #8b5cf6, #06b6d4);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                background-clip: text;
            ">
                üöÄ HR ANALYTICS INTELLIGENCE SUITE
            </h2>
            <p style="font-size: 1.2rem; margin-bottom: 2rem; opacity: 0.9;">
                Plataforma Premium de Business Intelligence para Recursos Humanos
            </p>
            <div style="margin: 2rem 0;">
                <span style="background: rgba(139, 92, 246, 0.2); padding: 0.5rem 1rem; border-radius: 15px; margin: 0.25rem; display: inline-block;">
                    Machine Learning
                </span>
                <span style="background: rgba(6, 182, 212, 0.2); padding: 0.5rem 1rem; border-radius: 15px; margin: 0.25rem; display: inline-block;">
                    Predictive Analytics
                </span>
                <span style="background: rgba(16, 185, 129, 0.2); padding: 0.5rem 1rem; border-radius: 15px; margin: 0.25rem; display: inline-block;">
                    Real-time Insights
                </span>
                <span style="background: rgba(245, 158, 11, 0.2); padding: 0.5rem 1rem; border-radius: 15px; margin: 0.25rem; display: inline-block;">
                    Executive Dashboard
                </span>
            </div>
            <p style="margin-top: 2rem; font-size: 0.95rem; opacity: 0.7;">
                Powered by Streamlit ‚Ä¢ Python ‚Ä¢ Plotly ‚Ä¢ Machine Learning<br>
                Dashboard desenvolvido para portf√≥lio profissional | Dados simulados para demonstra√ß√£o
            </p>
            <div style="margin-top: 2rem;">
                <p style="font-size: 0.9rem; opacity: 0.6;">
                    ¬© 2024 HR Analytics Intelligence Suite ‚Ä¢ Vers√£o 2.0 Premium<br>
                    Desenvolvido com üíú para showcasing de habilidades em Data Science & Analytics
                </p>
            </div>
        </div>
        
        <div style="
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent 30%, rgba(255, 255, 255, 0.03) 50%, transparent 70%);
            animation: footerShine 8s linear infinite;
            pointer-events: none;
        "></div>
    </div>
    
    <style>
        @keyframes footerShine {
            0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
            100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
        }
    </style>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()'].std()
                
                # Predi√ß√£o com intervalos de confian√ßa
                prediction_1m = int(recent_avg * (1 + np.random.normal(0, 0.08)))
                prediction_3m = int(recent_avg * (1 + np.random.normal(0, 0.12)))
                prediction_6m = int(recent_avg * (1 + np.random.normal(0, 0.15)))
                
                confidence_1m = 87  # Simulado
                confidence_3m = 74
                confidence_6m = 63
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.markdown(f"""
                    <div class="premium-metric-card">
                        <div class="premium-metric-label">üéØ PREDI√á√ÉO 1 M√äS</div>
                        <div class="premium-metric-value">{prediction_1m}</div>
                        <div class="premium-metric-trend">
                            Confian√ßa IA: {confidence_1m}%<br>
                            Intervalo: {prediction_1m - int(volatility)} - {prediction_1m + int(volatility)}
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    st.markdown(f"""
                    <div class="premium-metric-card">
                        <div class="premium-metric-label">üìä PREDI√á√ÉO 3 MESES</div>
                        <div class="premium-metric-value">{prediction_3m}</div>
                        <div class="premium-metric-trend">
                            Confian√ßa IA: {confidence_3m}%<br>
                            Tend√™ncia: {metricas['tendencia_geral']}
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col3:
                    st.markdown(f"""
                    <div class="premium-metric-card">
                        <div class="premium-metric-label">üîÆ PREDI√á√ÉO 6 MESES</div>
                        <div class="premium-metric-value">{prediction_6m}</div>
                        <div class="premium-metric-trend">
                            Confian√ßa IA: {confidence_6m}%<br>
                            Volatilidade: {volatility:.1f}
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                
                # An√°lise de risco preditiva
                risk_score = (prediction_1m - recent_avg) / recent_avg * 100 if recent_avg > 0 else 0
                risk_level = "ALTO" if abs(risk_score) > 20 else "M√âDIO" if abs(risk_score) > 10 else "BAIXO"
                risk_color = "critical-insight" if risk_level == "ALTO" else "warning-insight" if risk_level == "M√âDIO" else "success-insight"
                
                st.markdown("#### üö® **An√°lise de Risco Preditiva com IA**")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.markdown(f"""
                    <div class="ultra-insight-card {risk_color}">
                        <h4>‚ö° N√çVEL DE RISCO: {risk_level}</h4>
                        <p><strong>Score de Risco:</strong> {abs(risk_score):.1f}%</p>
                        <p><strong>Dire√ß√£o:</strong> {'Crescente' if risk_score > 0 else 'Decrescente' if risk_score < 0 else 'Est√°vel'}</p>
                        <p>üéØ <strong>A√ß√£o:</strong> {'Interven√ß√£o imediata' if risk_level == 'ALTO' else 'Monitoramento ativo' if risk_level == 'M√âDIO' else 'Manter estrat√©gia'}</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    impacto_financeiro_futuro = prediction_1m * 280
                    economia_potencial = (recent_avg - prediction_1m) * 280 if prediction_1m < recent_avg else 0
                    
                    st.markdown(f"""
                    <div class="ultra-insight-card warning-insight">
                        <h4>üí∞ IMPACTO FINANCEIRO FUTURO</h4>
                        <p><strong>Proje√ß√£o 1 M√™s:</strong> R$ {impacto_financeiro_futuro:,.0f}</p>
                        <p><strong>{'Economia Potencial:' if economia_potencial > 0 else 'Custo Adicional:'}</strong> R$ {abs(economia_potencial):,.0f}</p>
                        <p>üìà <strong>ROI Esperado:</strong> {25 if risk_level == 'BAIXO' else 35 if risk_level == 'M√âDIO' else 45}% com interven√ß√£o</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col3:
                    # Fatores de risco identificados
                    risk_factors = []
                    
                    if metricas['taxa_justificacao'] < 70:
                        risk_factors.append("Taxa de conformidade baixa")
                    if metricas['ausencias_criticas'] > metricas['total_ausencias'] * 0.2:
                        risk_factors.append("Alto √≠ndice de criticidade")
                    if metricas['score_rh'] < 70:
                        risk_factors.append("Score corporativo baixo")
                    
                    if not risk_factors:
                        risk_factors = ["Padr√µes dentro da normalidade"]
                    
                    st.markdown(f"""
                    <div class="ultra-insight-card ultra-insight-card">
                        <h4>üîç FATORES DE RISCO IA</h4>
                        {''.join([f'<p>‚Ä¢ {factor}</p>' for factor in risk_factors[:3]])}
                        <p>ü§ñ <strong>Recomenda√ß√£o IA:</strong> {'Plano de conting√™ncia' if len([f for f in risk_factors if f != 'Padr√µes dentro da normalidade']) > 1 else 'Monitoramento padr√£o'}</p>
                    </div>
                    """, unsafe_allow_html=True)
        
        else:
            st.info("üìä **Dados insuficientes** para an√°lise preditiva robusta. M√≠nimo necess√°rio: 20 registros.")
        
        # Simula√ß√£o de Machine Learning
        st.markdown("#### ü§ñ **Simulador de Machine Learning Avan√ßado**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("##### üß† **Modelo de Classifica√ß√£o de Risco**")
            
            # Simular accuracy do modelo
            model_accuracy = random.uniform(82, 94)
            precision = random.uniform(78, 89)
            recall = random.uniform(75, 87)
            f1_score = (2 * precision * recall) / (precision + recall)
            
            st.markdown(f"""
            <div class="ultra-insight-card success-insight">
                <h4>üìä Performance do Modelo IA</h4>
                <p><strong>Accuracy:</strong> {model_accuracy:.1f}%</p>
                <p><strong>Precision:</strong> {precision:.1f}%</p>
                <p><strong>Recall:</strong> {recall:.1f}%</p>
                <p><strong>F1-Score:</strong> {f1_score:.1f}%</p>
                <p>üéØ <strong>Status:</strong> {'Modelo Otimizado' if model_accuracy > 85 else 'Requer Ajustes'}</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("##### üéØ **Recomenda√ß√µes Estrat√©gicas IA**")
            
            # Gerar recomenda√ß√µes baseadas nos dados
            recomendacoes_ia = []
            
            if metricas['taxa_justificacao'] < 75:
                recomendacoes_ia.append("Implementar canal digital para justificativas")
            if metricas['score_rh'] < 80:
                recomendacoes_ia.append("Programa de wellness corporativo")
            if metricas['taxa_absenteismo'] > 4:
                recomendacoes_ia.append("Flexibiliza√ß√£o de hor√°rios")
            
            if not recomendacoes_ia:
                recomendacoes_ia = ["Manter estrat√©gias atuais", "Monitoramento preventivo", "Benchmarking cont√≠nuo"]
            
            st.markdown(f"""
            <div class="ultra-insight-card warning-insight">
                <h4>üöÄ Recomenda√ß√µes Estrat√©gicas</h4>
                {''.join([f'<p>‚Ä¢ {rec}</p>' for rec in recomendacoes_ia[:4]])}
                <p>‚è±Ô∏è <strong>Prazo:</strong> 30-90 dias</p>
                <p>üíé <strong>Prioridade:</strong> {'Alta' if metricas['score_rh'] < 70 else 'M√©dia'}</p>
            </div>
            """, unsafe_allow_html=True)
    
    with tab5:
        st.markdown('<div class="ultra-section-title">üöÄ INTELLIGENCE HUB CORPORATIVO</div>', unsafe_allow_html=True)
        
        # Dashboard de intelig√™ncia corporativa
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            # KPI de Rotatividade
            funcionarios_novos = len(df_filtrado[df_filtrado['Anos_Empresa'] <= 1]) if len(df_filtrado) > 0 else 0
            taxa_rotatividade = round((funcionarios_novos / metricas['funcionarios_impactados'] * 100), 1) if metricas['funcionarios_impactados'] > 0 else 0
            
            st.markdown(f"""
            <div class="premium-metric-card">
                <div class="premium-metric-label">üîÑ √çNDICE DE ROTATIVIDADE</div>
                <div class="premium-metric-value">{taxa_rotatividade}%</div>
                <div class="premium-metric-trend">
                    {funcionarios_novos} funcion√°rios < 1 ano
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            # √çndice de Satisfa√ß√£o Simulado
            indice_satisfacao = max(0, min(100, metricas['score_rh'] + random.randint(-5, 5)))
            
            st.markdown(f"""
            <div class="premium-metric-card">
                <div class="premium-metric-label">üòä √çNDICE DE SATISFA√á√ÉO</div>
                <div class="premium-metric-value">{indice_satisfacao}</div>
                <div class="premium-metric-trend">
                    Baseado em algoritmo IA
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            # Produtividade Estimada
            produtividade = round(100 - (metricas['taxa_absenteismo'] * 2), 1)
            
            st.markdown(f"""
            <div class="premium-metric-card">
                <div class="premium-metric-label">‚ö° PRODUTIVIDADE ESTIMADA</div>
                <div class="premium-metric-value">{produtividade}%</div>
                <div class="premium-metric-trend">
                    Correla√ß√£o inversa com aus√™ncias
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            # ROI de Interven√ß√µes
            roi_estimado = random.randint(180, 320)
            
            st.markdown(f"""
            <div class="premium-metric-card">
                <div class="premium-metric-label">üíé ROI INTERVEN√á√ïES</div>
                <div class="premium-metric-value">{roi_estimado}%</div>
                <div class="premium-metric-trend">
                    Retorno em 12 meses
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        # An√°lise de benchmark de mercado
        st.markdown("#### üìä **Benchmark de Mercado & Competitividade**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Compara√ß√£o com mercado
            benchmark_data = {
                'M√©trica': ['Taxa Absente√≠smo', 'Taxa Conformidade', 'Score RH', 'Produtividade'],
                'Nossa Empresa': [metricas['taxa_absenteismo'], metricas['taxa_justificacao'], metricas['score_rh'], produtividade],
                'Mercado - Q1': [4.2, 72.5, 75.0, 87.3],
                'Top 10%': [2.1, 89.2, 92.5, 96.8]
            }
            
            benchmark_df = pd.DataFrame(benchmark_data)
            
            fig_benchmark = go.Figure()
            
            fig_benchmark.add_trace(go.Scatter(
                x=benchmark_df['M√©trica'],
                y=benchmark_df['Nossa Empresa'],
                mode='lines+markers',
                name='Nossa Performance',
                line=dict(color='#8b5cf6', width=4),
                marker=dict(color='#06b6d4', size=12, line=dict(width=2, color='white'))
            ))
            
            fig_benchmark.add_trace(go.Scatter(
                x=benchmark_df['M√©trica'],
                y=benchmark_df['Mercado - Q1'],
                mode='lines+markers',
                name='M√©dia Mercado',
                line=dict(color='#f59e0b', width=3, dash='dash'),
                marker=dict(color='#f59e0b', size=10)
            ))
            
            fig_benchmark.add_trace(go.Scatter(
                x=benchmark_df['M√©trica'],
                y=benchmark_df['Top 10%'],
                mode='lines+markers',
                name='Top 10% Mercado',
                line=dict(color='#10b981', width=3, dash='dot'),
                marker=dict(color='#10b981', size=10)
            ))
            
            theme = create_ultra_plotly_theme()
            fig_benchmark.update_layout(**theme['layout'])
            fig_benchmark.update_layout(title="Posicionamento Competitivo", height=400)
            
            st.plotly_chart(fig_benchmark, use_container_width=True, config={'displayModeBar': False})
        
        with col2:
            # Radar Chart de Compet√™ncias
            competencias = ['Gest√£o Pessoas', 'Conformidade', 'Efici√™ncia', 'Inova√ß√£o', 'Sustentabilidade']
            scores_empresa = [
                min(100, max(0, 100 - metricas['taxa_absenteismo'] * 10)),
                metricas['taxa_justificacao'],
                produtividade,
                indice_satisfacao,
                metricas['score_rh']
            ]
            
            fig_radar = go.Figure()
            
            fig_radar.add_trace(go.Scatterpolar(
                r=scores_empresa,
                theta=competencias,
                fill='toself',
                name='Nossa Performance',
                line=dict(color='#8b5cf6', width=2),
                fillcolor='rgba(139, 92, 246, 0.2)'
            ))
            
            fig_radar.add_trace(go.Scatterpolar(
                r=[85, 75, 90, 80, 82],  # Benchmark mercado
                theta=competencias,
                fill='toself',
                name='Benchmark Mercado',
                line=dict(color='#06b6d4', width=2, dash='dash'),
                fillcolor='rgba(6, 182, 212, 0.1)'
            ))
            
            theme = create_ultra_plotly_theme()
            fig_radar.update_layout(**theme['layout'])
            fig_radar.update_layout(
                title="Radar de Compet√™ncias Corporativas",
                height=400,
                polar=dict(
                    radialaxis=dict(
                        visible=True,
                        range=[0, 100],
                        gridcolor='rgba(255, 255, 255, 0.2)',
                        tickfont=dict(color='white', size=10)
                    ),
                    angularaxis=dict(
                        gridcolor='rgba(255, 255, 255, 0.2)',
                        tickfont=dict(color='white', size=11)
                    )
                )
            )
            
            st.plotly_chart(fig_radar, use_container_width=True, config={'displayModeBar': False})
        
        # Insights estrat√©gicos de intelig√™ncia
        st.markdown("#### üß† **Insights Estrat√©gicos de Business Intelligence**")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            posicionamento = "L√≠der" if metricas['score_rh'] > 85 else "Competitivo" if metricas['score_rh'] > 70 else "Em Desenvolvimento"
            card_class = "success-insight" if posicionamento == "L√≠der" else "warning-insight" if posicionamento == "Competitivo" else "critical-insight"
            
            st.markdown(f"""
            <div class="ultra-insight-card {card_class}">
                <h4>üèÜ POSICIONAMENTO MERCADO</h4>
                <p><strong>Classifica√ß√£o:</strong> {posicionamento}</p>
                <p><strong>Score Geral:</strong> {metricas['score_rh']}/100</p>
                <p>üìä <strong>Percentil:</strong> {random.randint(65, 92)}¬∫ percentil</p>
                <p>üéØ <strong>Gap para lideran√ßa:</strong> {max(0, 90 - metricas['score_rh'])} pontos</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            oportunidades = []
            if metricas['taxa_justificacao'] < 80:
                oportunidades.append("Digitaliza√ß√£o de processos")
            if metricas['taxa_absenteismo'] > 3:
                oportunidades.append("Programa wellness")
            if indice_satisfacao < 85:
                oportunidades.append("Engagement initiatives")
            
            if not oportunidades:
                oportunidades = ["Otimiza√ß√£o cont√≠nua", "Inova√ß√£o incremental"]
            
            st.markdown(f"""
            <div class="ultra-insight-card warning-insight">
                <h4>üöÄ OPORTUNIDADES ESTRAT√âGICAS</h4>
                {''.join([f'<p>‚Ä¢ {op}</p>' for op in oportunidades[:3]])}
                <p>üí∞ <strong>Potencial ROI:</strong> {random.randint(200, 400)}%</p>
                <p>‚è∞ <strong>Timeframe:</strong> 6-12 meses</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            riscos = []
            if metricas['taxa_absenteismo'] > 5:
                riscos.append("Alta rotatividade potencial")
            if metricas['score_rh'] < 70:
                riscos.append("Perda de competitividade")
            if taxa_rotatividade > 15:
                riscos.append("Custos de recrutamento")
            
            if not riscos:
                riscos = ["Riscos controlados", "Monitoramento preventivo"]
            
            risk_level = "Alto" if len([r for r in riscos if r not in ["Riscos controlados", "Monitoramento preventivo"]]) > 1 else "Baixo"
            risk_card = "critical-insight" if risk_level == "Alto" else "success-insight"
            
            st.markdown(f"""
            <div class="ultra-insight-card {risk_card}">
                <h4>‚ö†Ô∏è GEST√ÉO DE RISCOS</h4>
                {''.join([f'<p>‚Ä¢ {risco}</p>' for risco in riscos[:3]])}
                <p>üéØ <strong>N√≠vel Geral:</strong> {risk_level}</p>
                <p>üõ°Ô∏è <strong>Mitiga√ß√£o:</strong> {'A√ß√£o imediata' if risk_level == 'Alto' else 'Monitoramento'}</p>
            </div>
            """, unsafe_allow_html=True)
    
    with tab6:
        st.markdown('<div class="ultra-section-title">üìã EXECUTIVE SUITE & RELAT√ìRIOS</div>', unsafe_allow_html=True)
        
        # Central de downloads premium
        st.markdown("#### üì• **Centro de Downloads Executivos**")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("üìä **Excel Premium**", help="Dataset completo com an√°lises"):
                try:
                    csv_data = df_filtrado.to_csv(index=False)
                    st.download_button(
                        label="‚¨áÔ∏è Download Excel",
                        data=csv_data,
                        file_name=f"hr_analytics_premium_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
                        mime="text/csv",
                        key="excel_download"
                    )
                    st.success("‚úÖ **Excel Premium gerado com sucesso!**")
                except Exception as e:
                    st.error(f"Erro: {str(e)}")
        
        with col2:
            if st.button("üìà **Relat√≥rio Executivo**", help="Sum√°rio para C-Level"):
                try:
                    relatorio_executivo = f"""
üöÄ RELAT√ìRIO EXECUTIVO HR ANALYTICS INTELLIGENCE SUITE
===================================================

üìÖ PER√çODO DE AN√ÅLISE: {data_inicio.strftime('%d/%m/%Y')} - {data_fim.strftime('%d/%m/%Y')}
üïê GERADO EM: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}

üìä M√âTRICAS PRINCIPAIS
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ Total de Aus√™ncias: {metricas['total_ausencias']:,}
‚Ä¢ Colaboradores Impactados: {metricas['funcionarios_impactados']:,}
‚Ä¢ Taxa de Conformidade: {metricas['taxa_justificacao']}%
‚Ä¢ Score Corporativo: {metricas['score_rh']}/100
‚Ä¢ Impacto Financeiro: R$ {metricas['impacto_financeiro']:,.2f}
‚Ä¢ Taxa de Absente√≠smo: {metricas['taxa_absenteismo']}%

üéØ STATUS CORPORATIVO
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ Tend√™ncia Geral: {metricas['tendencia_geral']}
‚Ä¢ √çndice de Criticidade: {metricas['indice_criticidade']}
‚Ä¢ Pico Temporal: {metricas['pico_temporal']}
‚Ä¢ Departamentos Cr√≠ticos: {metricas['departamentos_criticos']}/9

üöÄ RECOMENDA√á√ïES ESTRAT√âGICAS
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
1. Implementa√ß√£o imediata de canal digital para justificativas
2. Programa de wellness corporativo integrado
3. Flexibiliza√ß√£o de pol√≠ticas de trabalho
4. Sistema de monitoramento preditivo com IA
5. Benchmarking cont√≠nuo com mercado

üí∞ PROJE√á√ÉO FINANCEIRA
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ ROI Estimado: {random.randint(250, 400)}% em 12 meses
‚Ä¢ Economia Potencial: R$ {metricas['impacto_financeiro'] * 0.35:,.0f}
‚Ä¢ Payback Period: 4-6 meses
‚Ä¢ Valor Presente L√≠quido: R$ {metricas['impacto_financeiro'] * 1.8:,.0f}

üéØ PR√ìXIMOS PASSOS
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ Aprova√ß√£o de or√ßamento para interven√ß√µes
‚Ä¢ Forma√ß√£o de task force multidisciplinar
‚Ä¢ Implementa√ß√£o de quick wins em 30 dias
‚Ä¢ Revis√£o trimestral de m√©tricas-chave

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Relat√≥rio gerado pelo HR Analytics Intelligence Suite
Tecnologia: Machine Learning + Business Intelligence
Contato: analytics@empresa.com.br
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    """
                    
                    st.download_button(
                        label="‚¨áÔ∏è Download Relat√≥rio",
                        data=relatorio_executivo,
                        file_name=f"relatorio_executivo_hr_{datetime.now().strftime('%Y%m%d_%H%M')}.txt",
                        mime="text/plain",
                        key="relatorio_download"
                    )
                    st.success("‚úÖ **Relat√≥rio Executivo gerado!**")
                except Exception as e:
                    st.error(f"Erro: {str(e)}")
        
        with col3:
            if st.button("üîÆ **An√°lise Preditiva**", help="Predi√ß√µes e forecasts"):
                st.info("üöß **M√≥dulo em desenvolvimento** - Dispon√≠vel na vers√£o Enterprise")
        
        with col4:
            if st.button("üìä **Dashboard PDF**", help="Snapshot visual"):
                st.info("üéØ **Funcionalidade Premium** - Contate o suporte")
        
        # Resumo executivo ultra-detalhado
        st.markdown("#### üìä **Resumo Executivo Final - C-Level Dashboard**")
        
        st.markdown(f"""
        <div style="
            background: linear-gradient(145deg, rgba(139, 92, 246, 0.1), rgba(6, 182, 212, 0.1));
            backdrop-filter: blur(20px);
            border: 2px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 3rem 2rem;
            margin: 2rem 0;
            color: white;
        ">
            <h2 style="text-align: center; color: white; font-family: 'Orbitron', monospace; margin-bottom: 3rem;">
                üìà EXECUTIVE SUMMARY DASHBOARD
            </h2>
            
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 2rem;">
                
                <div style="
                    background: rgba(139, 92, 246, 0.15);
                    border: 1px solid rgba(139, 92, 246, 0.3);
                    border-radius: 15px;
                    padding: 2rem;
                    border-left: 6px solid #8b5cf6;
                ">
                    <h3 style="color: #8b5cf6; margin-bottom: 1.5rem;">üìä SITUA√á√ÉO ATUAL</h3>
                    <p><strong>Total de Aus√™ncias:</strong> {metricas['total_ausencias']:,} registros</p>
                    <p><strong>Colaboradores Afetados:</strong> {metricas['funcionarios_impactados']:,} pessoas</p>
                    <p><strong>Taxa de Conformidade:</strong> {metricas['taxa_justificacao']}%</p>
                    <p><strong>Impacto Financeiro:</strong> R$ {metricas['impacto_financeiro']:,.0f}</p>
                    <p><strong>Score Corporativo:</strong> {metricas['score_rh']}/100</p>
                </div>
                
                <div style="
                    background: rgba(16, 185, 129, 0.15);
                    border: 1px solid rgba(16, 185, 129, 0.3);
                    border-radius: 15px;
                    padding: 2rem;
                    border-left: 6px solid #10b981;
                ">
                    <h3 style="color: #10b981; margin-bottom: 1.5rem;">üéØ PONTOS FORTES</h3>
                    <p>‚úÖ Sistema de monitoramento em tempo real</p>
                    <p>‚úÖ Dados estruturados e organizados</p>
                    <p>‚úÖ {'Score acima da m√©dia do mercado' if metricas['score_rh'] > 75 else 'Base s√≥lida para melhorias'}</p>
                    <p>‚úÖ Dashboard inteligente com IA</p>
                    <p>‚úÖ Visibilidade total dos processos</p>
                </div>
                
                <div style="
                    background: rgba(245, 158, 11, 0.15);
                    border: 1px solid rgba(245, 158, 11, 0.3);
                    border-radius: 15px;
                    padding: 2rem;
                    border-left: 6px solid #f59e0b;
                ">
                    <h3 style="color: #f59e0b; margin-bottom: 1.5rem;">‚ö†Ô∏è OPORTUNIDADES</h3>
                    <p>üîç {'Otimiza√ß√£o da taxa de conformidade' if metricas['taxa_justificacao'] < 85 else 'Manuten√ß√£o da excel√™ncia'}</p>
                    <p>üîç Redu√ß√£o de aus√™ncias cr√≠ticas</p>
                    <p>üîç Implementa√ß√£o de analytics preditivos</p>
                    <p>üîç Benchmarking competitivo cont√≠nuo</p>
                    <p>üîç ROI de {random.randint(200, 350)}% em interven√ß√µes</p>
                </div>
                
                <div style="
                    background: rgba(239, 68, 68, 0.15);
                    border: 1px solid rgba(239, 68, 68, 0.3);
                    border-radius: 15px;
                    padding: 2rem;
                    border-left: 6px solid #ef4444;
                ">
                    <h3 style="color        if nivel_criticidade != 'Todos':
            df_filtrado = df_filtrado[df_filtrado['Criticidade_Ausencia'] == nivel_criticidade]
        
        # Filtro temporal seguro
        try:
            df_filtrado = df_filtrado[
                (df_filtrado['Data_Ausencia'].dt.date >= data_inicio) &
                (df_filtrado['Data_Ausencia'].dt.date <= data_fim)
            ]
        except:
            pass
            
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Ajuste nos filtros aplicado automaticamente: {str(e)}")
        df_filtrado = df.copy()
    
    # Valida√ß√£o de dados p√≥s-filtros
    if len(df_filtrado) == 0:
        st.warning("‚ö†Ô∏è Nenhum registro encontrado com os filtros atuais. Exibindo dataset completo.")
        df_filtrado = df.copy()
    
    # C√°lculo de m√©tricas premium
    metricas = calculate_premium_metrics(df_filtrado)
    
    # Sistema de abas ultra-futur√≠stico
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "üéØ **COMMAND CENTER**",
        "üè¢ **DEPARTAMENTAL AI**", 
        "üìä **ANALYTICS 360¬∞**",
        "üîÆ **PREDICTIVE ENGINE**",
        "üöÄ **INTELLIGENCE HUB**",
        "üìã **EXECUTIVE SUITE**"
    ])
    
    with tab1:
        st.markdown('<div class="ultra-section-title">üéØ CENTRO DE COMANDO EXECUTIVO</div>', unsafe_allow_html=True)
        
        # Cards de m√©tricas ultra-premium
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            trend_class = "trend-negative" if metricas['total_ausencias'] > 100 else "trend-positive" if metricas['total_ausencias'] < 50 else "trend-neutral"
            st.markdown(f"""
            <div class="premium-metric-card">
                <div class="premium-metric-label">üìä TOTAL DE AUS√äNCIAS</div>
                <div class="premium-metric-value">{metricas['total_ausencias']}</div>
                <div class="premium-metric-trend {trend_class}">
                    {round((metricas['total_ausencias']/len(df)*100), 1)}% do dataset | {metricas['tendencia_geral']}
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class="premium-metric-card">
                <div class="premium-metric-label">üë• COLABORADORES IMPACTADOS</div>
                <div class="premium-metric-value">{metricas['funcionarios_impactados']}</div>
                <div class="premium-metric-trend">
                    {metricas['ausencias_por_funcionario']} aus√™ncias/pessoa
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            taxa_cor = "trend-positive" if metricas['taxa_justificacao'] > 80 else "trend-negative" if metricas['taxa_justificacao'] < 60 else "trend-neutral"
            st.markdown(f"""
            <div class="premium-metric-card">
                <div class="premium-metric-label">‚úÖ TAXA DE CONFORMIDADE</div>
                <div class="premium-metric-value">{metricas['taxa_justificacao']}%</div>
                <div class="premium-metric-trend {taxa_cor}">
                    {'üü¢ Excelente' if metricas['taxa_justificacao'] > 80 else 'üî¥ Cr√≠tica' if metricas['taxa_justificacao'] < 60 else 'üü° Moderada'}
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            st.markdown(f"""
            <div class="premium-metric-card">
                <div class="premium-metric-label">üí∞ IMPACTO FINANCEIRO</div>
                <div class="premium-metric-value">R$ {metricas['impacto_financeiro']:,.0f}</div>
                <div class="premium-metric-trend">
                    R$ {metricas['impacto_financeiro']/metricas['total_ausencias']:,.0f} por aus√™ncia
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        # Segunda linha de m√©tricas avan√ßadas
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown(f"""
            <div class="premium-metric-card">
                <div class="premium-metric-label">üè¢ DEPARTAMENTOS CR√çTICOS</div>
                <div class="premium-metric-value">{metricas['departamentos_criticos']}</div>
                <div class="premium-metric-trend">de 9 departamentos</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            taxa_cor = "trend-positive" if metricas['taxa_absenteismo'] < 3 else "trend-negative" if metricas['taxa_absenteismo'] > 6 else "trend-neutral"
            st.markdown(f"""
            <div class="premium-metric-card">
                <div class="premium-metric-label">üìà TAXA DE ABSENTE√çSMO</div>
                <div class="premium-metric-value">{metricas['taxa_absenteismo']}%</div>
                <div class="premium-metric-trend {taxa_cor}">
                    {'üü¢ Baixa' if metricas['taxa_absenteismo'] < 3 else 'üî¥ Alta' if metricas['taxa_absenteismo'] > 6 else 'üü° Moderada'}
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown(f"""
            <div class="premium-metric-card">
                <div class="premium-metric-label">üìÖ PICO TEMPORAL</div>
                <div class="premium-metric-value" style="font-size: 2rem;">{metricas['pico_temporal']}</div>
                <div class="premium-metric-trend">per√≠odo cr√≠tico identificado</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            score_cor = "trend-positive" if metricas['score_rh'] > 80 else "trend-negative" if metricas['score_rh'] < 60 else "trend-neutral"
            st.markdown(f"""
            <div class="premium-metric-card">
                <div class="premium-metric-label">üéØ SCORE CORPORATIVO</div>
                <div class="premium-metric-value">{metricas['score_rh']}</div>
                <div class="premium-metric-trend {score_cor}">
                    {'üèÜ Excelente' if metricas['score_rh'] > 80 else '‚ö†Ô∏è Cr√≠tico' if metricas['score_rh'] < 60 else 'üìä Bom'}
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        # Gr√°ficos principais ultra-avan√ßados
        st.markdown('<div class="ultra-section-title">üìä AN√ÅLISE VISUAL INTELIGENTE</div>', unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            try:
                fig_dept = create_advanced_chart(df_filtrado, "departmental_analysis")
                st.plotly_chart(fig_dept, use_container_width=True, config={'displayModeBar': False})
            except Exception as e:
                st.error(f"Erro no gr√°fico departamental: {str(e)}")
        
        with col2:
            try:
                fig_motivos = create_advanced_chart(df_filtrado, "motivos_premium")
                st.plotly_chart(fig_motivos, use_container_width=True, config={'displayModeBar': False})
            except Exception as e:
                st.error(f"Erro no gr√°fico de motivos: {str(e)}")
        
        # Timeline avan√ßada
        try:
            fig_timeline = create_advanced_chart(df_filtrado, "timeline_advanced")
            st.plotly_chart(fig_timeline, use_container_width=True, config={'displayModeBar': False})
        except Exception as e:
            st.error(f"Erro na timeline: {str(e)}")
        
        # Insights ultra-inteligentes
        st.markdown('<div class="ultra-section-title">üß† INSIGHTS DE INTELIG√äNCIA ARTIFICIAL</div>', unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            try:
                dept_counts = df_filtrado['Departamento'].value_counts()
                if len(dept_counts) > 0:
                    dept_top = dept_counts.index[0]
                    dept_valor = dept_counts.iloc[0]
                    dept_perc = round((dept_valor / metricas['total_ausencias'] * 100), 1)
                    
                    card_class = "critical-insight" if dept_perc > 35 else "warning-insight" if dept_perc > 25 else "success-insight"
                    status_emoji = "üö®" if dept_perc > 35 else "‚ö†Ô∏è" if dept_perc > 25 else "‚úÖ"
                    urgencia = "CR√çTICO" if dept_perc > 35 else "ATEN√á√ÉO" if dept_perc > 25 else "CONTROLADO"
                    
                    st.markdown(f"""
                    <div class="ultra-insight-card {card_class}">
                        <h4>{status_emoji} DEPARTAMENTO CR√çTICO - {urgencia}</h4>
                        <p><strong>{dept_top}</strong> concentra <strong>{dept_valor} aus√™ncias</strong> ({dept_perc}% do total)</p>
                        <p>üí° <strong>Recomenda√ß√£o IA:</strong> {'Interven√ß√£o imediata com plano de a√ß√£o 30 dias' if dept_perc > 35 else 'Monitoramento ativo quinzenal' if dept_perc > 25 else 'Manter padr√£o atual'}</p>
                        <p>üí∞ <strong>Impacto:</strong> R$ {dept_valor * 280:,.0f} em perdas estimadas</p>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.info("Dados insuficientes para an√°lise departamental")
            except Exception as e:
                st.error(f"Erro na an√°lise: {str(e)}")
        
        with col2:
            try:
                motivo_counts = df_filtrado['Motivo_Ausencia'].value_counts()
                if len(motivo_counts) > 0:
                    motivo_top = motivo_counts.index[0]
                    motivo_valor = motivo_counts.iloc[0]
                    motivo_perc = round((motivo_valor / metricas['total_ausencias'] * 100), 1)
                    
                    # An√°lise inteligente do motivo
                    recomendacoes = {
                        'Consulta M√©dica': 'Programa de sa√∫de preventiva corporativa',
                        'Atestado M√©dico': 'An√°lise de ambiente ocupacional',
                        'Emerg√™ncia Familiar': 'Flexibiliza√ß√£o de hor√°rios familiares',
                        'Doen√ßa Familiar': 'Apoio psicol√≥gico e suporte familiar',
                        'Problemas de Transporte': 'Aux√≠lio transporte ou home office',
                        'Compromissos Pessoais': 'Banco de horas personalizado',
                        'Sem Justificativa': 'Revis√£o disciplinar e comunica√ß√£o'
                    }
                    
                    recomendacao = recomendacoes.get(motivo_top, 'Investiga√ß√£o detalhada necess√°ria')
                    card_class = "critical-insight" if motivo_top == 'Sem Justificativa' else "warning-insight" if motivo_perc > 30 else "ultra-insight-card"
                    
                    st.markdown(f"""
                    <div class="ultra-insight-card {card_class}">
                        <h4>üéØ MOTIVO PREDOMINANTE</h4>
                        <p><strong>{motivo_top}</strong> representa <strong>{motivo_valor} casos</strong> ({motivo_perc}% do total)</p>
                        <p>üöÄ <strong>Solu√ß√£o IA:</strong> {recomendacao}</p>
                        <p>üìà <strong>Potencial ROI:</strong> {'Alto (25-40%)' if motivo_perc > 25 else 'M√©dio (15-25%)' if motivo_perc > 15 else 'Baixo (5-15%)'}</p>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.info("Dados insuficientes para an√°lise de motivos")
            except Exception as e:
                st.error(f"Erro na an√°lise: {str(e)}")
        
        with col3:
            taxa = metricas['taxa_justificacao']
            score = metricas['score_rh']
            
            if score > 85:
                status = "EXCEPCIONAL"
                card_class = "success-insight"
                emoji = "üèÜ"
                acao = "Manter excel√™ncia e replicar boas pr√°ticas"
            elif score > 70:
                status = "BOM"
                card_class = "ultra-insight-card"
                emoji = "‚úÖ"
                acao = "Pequenos ajustes para otimiza√ß√£o"
            elif score > 60:
                status = "MODERADO"
                card_class = "warning-insight"
                emoji = "‚ö†Ô∏è"
                acao = "Implementar melhorias estruturais"
            else:
                status = "CR√çTICO"
                card_class = "critical-insight"
                emoji = "üö®"
                acao = "Interven√ß√£o imediata necess√°ria"
            
            st.markdown(f"""
            <div class="ultra-insight-card {card_class}">
                <h4>{emoji} SCORE CORPORATIVO - {status}</h4>
                <p><strong>Score Geral:</strong> {score}/100</p>
                <p><strong>Taxa Conformidade:</strong> {taxa}%</p>
                <p>üéØ <strong>Estrat√©gia:</strong> {acao}</p>
                <p>üìä <strong>Benchmark:</strong> {'Acima do mercado' if score > 75 else 'Dentro da m√©dia' if score > 60 else 'Abaixo da m√©dia'}</p>
            </div>
            """, unsafe_allow_html=True)
    
    with tab2:
        st.markdown('<div class="ultra-section-title">üè¢ AN√ÅLISE DEPARTAMENTAL COM IA</div>', unsafe_allow_html=True)
        
        # An√°lise ultra-avan√ßada departamental
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üë• **Segmenta√ß√£o por G√™nero & Conformidade**")
            try:
                if len(df_filtrado) > 0:
                    genero_data = df_filtrado.groupby(['Genero', 'Status_Justificativa']).size().reset_index(name='count')
                    genero_data['Genero_Label'] = genero_data['Genero'].map({'M': 'Masculino', 'F': 'Feminino'})
                    
                    fig_genero = px.bar(
                        genero_data,
                        x='Genero_Label',
                        y='count',
                        color='Status_Justificativa',
                        title="",
                        color_discrete_map={'Sim': '#10b981', 'N√£o': '#ef4444'},
                        text='count',
                        barmode='group'
                    )
                    
                    theme = create_ultra_plotly_theme()
                    fig_genero.update_layout(**theme['layout'])
                    fig_genero.update_traces(
                        texttemplate='%{text}',
                        textposition='outside',
                        textfont=dict(color='white', size=12),
                        hovertemplate='<b>%{x}</b><br>%{fullData.name}: %{y}<br>Impacto: R$ %{customdata:,.0f}<extra></extra>',
                        customdata=genero_data['count'] * 280
                    )
                    fig_genero.update_layout(height=400)
                    
                    st.plotly_chart(fig_genero, use_container_width=True, config={'displayModeBar': False})
                else:
                    st.info("Dados insuficientes")
            except Exception as e:
                st.error(f"Erro: {str(e)}")
        
        with col2:
            st.markdown("#### ‚è∞ **Distribui√ß√£o por Experi√™ncia Corporativa**")
            try:
                if len(df_filtrado) > 0:
                    exp_data = df_filtrado.copy()
                    exp_data['Faixa_Experiencia'] = pd.cut(
                        exp_data['Anos_Empresa'],
                        bins=[-1, 1, 3, 5, 10, 50],
                        labels=['0-1 anos', '1-3 anos', '3-5 anos', '5-10 anos', '10+ anos']
                    )
                    
                    exp_counts = exp_data['Faixa_Experiencia'].value_counts().sort_index()
                    
                    fig_exp = px.bar(
                        x=exp_counts.index.astype(str),
                        y=exp_counts.values,
                        title="",
                        color=exp_counts.values,
                        color_continuous_scale=['#ef4444', '#f59e0b', '#8b5cf6', '#06b6d4', '#10b981'],
                        text=exp_counts.values
                    )
                    
                    theme = create_ultra_plotly_theme()
                    fig_exp.update_layout(**theme['layout'])
                    fig_exp.update_traces(
                        texttemplate='%{text}',
                        textposition='outside',
                        textfont=dict(color='white', size=12),
                        hovertemplate='<b>%{x}</b><br>Aus√™ncias: %{y}<br>Custo: R$ %{customdata:,.0f}<extra></extra>',
                        customdata=exp_counts.values * 280
                    )
                    fig_exp.update_coloraxes(showscale=False)
                    fig_exp.update_layout(height=400)
                    
                    st.plotly_chart(fig_exp, use_container_width=True, config={'displayModeBar': False})
                else:
                    st.info("Dados insuficientes")
            except Exception as e:
                st.error(f"Erro: {str(e)}")
        
        # Heatmap ultra-avan√ßado
        st.markdown("#### üî• **Matriz de Calor: Departamentos vs Motivos (IA Enhanced)**")
        try:
            if len(df_filtrado) > 0:
                heatmap_data = pd.crosstab(df_filtrado['Departamento'], df_filtrado['Motivo_Ausencia'])
                
                fig_heatmap = px.imshow(
                    heatmap_data.values,
                    x=heatmap_data.columns,
                    y=heatmap_data.index,
                    color_continuous_scale='Plasma',
                    title="Correla√ß√µes Identificadas por Machine Learning",
                    aspect='auto',
                    text_auto=True
                )
                
                theme = create_ultra_plotly_theme()
                fig_heatmap.update_layout(**theme['layout'])
                fig_heatmap.update_traces(
                    textfont={"color": "white", "size": 11, "family": "Orbitron"},
                    hovertemplate='<b>%{y}</b> √ó <b>%{x}</b><br>Correla√ß√£o: %{z}<br>Impacto: R$ %{customdata:,.0f}<extra></extra>',
                    customdata=heatmap_data.values * 280
                )
                fig_heatmap.update_layout(height=500)
                
                st.plotly_chart(fig_heatmap, use_container_width=True, config={'displayModeBar': False})
            else:
                st.info("Dados insuficientes para matriz de correla√ß√£o")
        except Exception as e:
            st.error(f"Erro na matriz: {str(e)}")
        
        # Tabela departamental ultra-anal√≠tica
        st.markdown("#### üìä **Dashboard Departamental Executivo**")
        try:
            if len(df_filtrado) > 0:
                dept_analysis = df_filtrado.groupby('Departamento').agg({
                    'Nome_Completo': 'count',
                    'Status_Justificativa': lambda x: (x == 'Sim').sum(),
                    'Salario_Atual': 'mean',
                    'Anos_Empresa': 'mean',
                    'Criticidade_Ausencia': lambda x: (x == 'Alta').sum()
                }).reset_index()
                
                dept_analysis.columns = ['Departamento', 'Total_Ausencias', 'Ausencias_Justificadas', 'Salario_Medio', 'Experiencia_Media', 'Ausencias_Criticas']
                
                dept_analysis['Taxa_Conformidade'] = round((dept_analysis['Ausencias_Justificadas'] / dept_analysis['Total_Ausencias'] * 100), 1)
                dept_analysis['Impacto_Financeiro'] = dept_analysis['Total_Ausencias'] * 280
                dept_analysis['Score_Departamental'] = (
                    (dept_analysis['Taxa_Conformidade'] * 0.4) +
                    (100 - (dept_analysis['Ausencias_Criticas'] / dept_analysis['Total_Ausencias'] * 100) * 0.6)
                ).round(1)
                
                # Classifica√ß√£o inteligente
                def classify_department(row):
                    if row['Score_Departamental'] > 80 and row['Ausencias_Criticas'] < 3:
                        return 'üü¢ Excelente'
                    elif row['Score_Departamental'] > 65 and row['Ausencias_Criticas'] < 5:
                        return 'üü° Boa'
                    else:
                        return 'üî¥ Cr√≠tica'
                
                dept_analysis['Status_IA'] = dept_analysis.apply(classify_department, axis=1)
                dept_analysis['Prioridade'] = dept_analysis['Impacto_Financeiro'].rank(ascending=False, method='min').astype(int)
                
                # Ordenar por impacto
                dept_analysis = dept_analysis.sort_values('Impacto_Financeiro', ascending=False)
                
                st.dataframe(
                    dept_analysis,
                    use_container_width=True,
                    hide_index=True,
                    column_config={
                        "Departamento": st.column_config.TextColumn("üè¢ Departamento", width="large"),
                        "Total_Ausencias": st.column_config.NumberColumn("üìä Aus√™ncias", width="small"),
                        "Taxa_Conformidade": st.column_config.NumberColumn("‚úÖ Conformidade (%)", format="%.1f", width="medium"),
                        "Salario_Medio": st.column_config.NumberColumn("üíº Sal√°rio M√©dio", format="R$ %.0f", width="medium"),
                        "Impacto_Financeiro": st.column_config.NumberColumn("üí∞ Impacto Total", format="R$ %.0f", width="large"),
                        "Score_Departamental": st.column_config.NumberColumn("üéØ Score IA", format="%.1f", width="small"),
                        "Status_IA": st.column_config.TextColumn("ü§ñ Status IA", width="medium"),
                        "Prioridade": st.column_config.NumberColumn("‚ö° Prioridade", width="small")
                    }
                )
            else:
                st.info("Dados insuficientes para an√°lise departamental")
        except Exception as e:
            st.error(f"Erro na tabela: {str(e)}")
    
    with tab3:
        st.markdown('<div class="ultra-section-title">üìä ANALYTICS 360¬∞ COM MACHINE LEARNING</div>', unsafe_allow_html=True)
        
        # An√°lise de padr√µes avan√ßados
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üìÖ **Padr√£o Semanal Inteligente**")
            try:
                if len(df_filtrado) > 0:
                    dias_semana = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
                    dias_pt = ['Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta', 'S√°bado', 'Domingo']
                    dia_counts = df_filtrado['Data_Ausencia'].dt.day_name().value_counts()
                    
                    dia_data = []
                    for i, dia_en in enumerate(dias_semana):
                        count = dia_counts.get(dia_en, 0)
                        dia_data.append({'Dia': dias_pt[i], 'Ausencias': count, 'Impacto': count * 280})
                    
                    dia_df = pd.DataFrame(dia_data)
                    
                    fig_semana = px.bar(
                        dia_df,
                        x='Dia',
                        y='Ausencias',
                        title="An√°lise Comportamental por Dia da Semana",
                        color='Ausencias',
                        color_continuous_scale=['#10b981', '#f59e0b', '#ef4444'],
                        text='Ausencias'
                    )
                    
                    theme = create_ultra_plotly_theme()
                    fig_semana.update_layout(**theme['layout'])
                    fig_semana.update_traces(
                        texttemplate='%{text}',
                        textposition='outside',
                        textfont=dict(color='white', size=12),
                        hovertemplate='<b>%{x}</b><br>Aus√™ncias: %{y}<br>Impacto: R$ %{customdata:,.0f}<extra></extra>',
                        customdata=dia_df['Impacto']
                    )
                    fig_semana.update_coloraxes(showscale=False)
                    fig_semana.update_layout(height=400)
                    
                    st.plotly_chart(fig_semana, use_container_width=True, config={'displayModeBar': False})
                else:
                    st.info("Dados insuficientes")
            except Exception as e:
                st.error(f"Erro: {str(e)}")
        
        with col2:
            st.markdown("#### üó∫Ô∏è **Distribui√ß√£o Geogr√°fica Nacional**")
            try:
                if len(df_filtrado) > 0:
                    estado_counts = df_filtrado['Estado_UF'].value_counts().head(10)
                    
                    fig_estado = px.bar(
                        x=estado_counts.index,
                        y=estado_counts.values,
                        title="Mapeamento por Estado (Top 10)",
                        color=estado_counts.values,
                        color_continuous_scale=['#8b5cf6', '#06b6d4', '#10b981'],
                        text=estado_counts.values
                    )
                    
                    theme = create_ultra_plotly_theme()
                    fig_estado.update_layout(**theme['layout'])
                    fig_estado.update_traces(
                        texttemplate='%{text}',
                        textposition='outside',
                        textfont=dict(color='white', size=12),
                        hovertemplate='<b>%{x}</b><br>Aus√™ncias: %{y}<br>Custo: R$ %{customdata:,.0f}<extra></extra>',
                        customdata=estado_counts.values * 280
                    )
                    fig_estado.update_coloraxes(showscale=False)
                    fig_estado.update_layout(height=400)
                    
                    st.plotly_chart(fig_estado, use_container_width=True, config={'displayModeBar': False})
                else:
                    st.info("Dados insuficientes")
            except Exception as e:
                st.error(f"Erro: {str(e)}")
        
        # An√°lise de correla√ß√£o ultra-avan√ßada
        st.markdown("#### üîó **Matriz de Correla√ß√£o Multidimensional**")
        try:
            if len(df_filtrado) > 0:
                fig_corr = create_advanced_chart(df_filtrado, "correlation_matrix")
                st.plotly_chart(fig_corr, use_container_width=True, config={'displayModeBar': False})
            else:
                st.info("Dados insuficientes para correla√ß√£o")
        except Exception as e:
            st.error(f"Erro na correla√ß√£o: {str(e)}")
        
    with tab4:
        st.markdown('<div class="ultra-section-title">üîÆ ENGINE PREDITIVO AVAN√áADO</div>', unsafe_allow_html=True)
        
        # Simula√ß√£o de IA preditiva avan√ßada
        if len(df_filtrado) >= 20:
            monthly_trend = df_filtrado.groupby('Mes_Nome_BR').size().reset_index(name='Ausencias')
            monthly_trend['Data_Sort'] = pd.to_datetime(monthly_trend['Mes_Nome_BR'], format='%b/%Y')
            monthly_trend = monthly_trend.sort_values('Data_Sort')
            
            if len(monthly_trend) >= 3:
                # An√°lise preditiva avan√ßada
                recent_avg = monthly_trend['Ausencias'].tail(3).mean()
                volatility = monthly_trend['Ausenciasimport streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from datetime import datetime, timedelta
import random
import time
import json
from typing import Dict, List, Tuple
import warnings
warnings.filterwarnings('ignore')

# üöÄ CONFIGURA√á√ÉO PREMIUM DA P√ÅGINA
st.set_page_config(
    page_title="üéØ HR Analytics Intelligence Suite",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://github.com/your-portfolio',
        'Report a bug': "mailto:your-email@domain.com",
        'About': "# HR Analytics Intelligence Suite\nDashboard Premium para An√°lise Avan√ßada de RH"
    }
)

# üé® CSS ULTRA PREMIUM COM ANIMA√á√ïES AVAN√áADAS
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Inter:wght@300;400;500;600;700;800;900&display=swap');
    
    /* VARI√ÅVEIS CSS PARA TEMA DIN√ÇMICO */
    :root {
        --primary: #8b5cf6;
        --secondary: #06b6d4;
        --success: #10b981;
        --warning: #f59e0b;
        --danger: #ef4444;
        --dark: #0f172a;
        --light: #f8fafc;
        --glass: rgba(255, 255, 255, 0.1);
        --glass-border: rgba(255, 255, 255, 0.18);
    }
    
    /* BACKGROUND FUTUR√çSTICO ULTRA AVAN√áADO */
    .stApp {
        background: 
            radial-gradient(circle at 20% 50%, rgba(139, 92, 246, 0.3) 0%, transparent 50%),
            radial-gradient(circle at 80% 20%, rgba(6, 182, 212, 0.3) 0%, transparent 50%),
            radial-gradient(circle at 40% 80%, rgba(16, 185, 129, 0.2) 0%, transparent 50%),
            linear-gradient(135deg, #0f172a 0%, #1e293b 25%, #0f172a 50%, #1e293b 75%, #0f172a 100%);
        background-size: 400% 400%;
        animation: gradientShift 20s ease infinite;
        font-family: 'Inter', sans-serif;
        overflow-x: hidden;
    }
    
    @keyframes gradientShift {
        0% { background-position: 0% 0%; }
        25% { background-position: 100% 0%; }
        50% { background-position: 100% 100%; }
        75% { background-position: 0% 100%; }
        100% { background-position: 0% 0%; }
    }
    
    /* HEADER ULTRA FUTUR√çSTICO */
    .mega-header {
        background: linear-gradient(135deg, 
            rgba(139, 92, 246, 0.15) 0%, 
            rgba(6, 182, 212, 0.15) 25%,
            rgba(16, 185, 129, 0.15) 50%,
            rgba(245, 158, 11, 0.15) 75%,
            rgba(139, 92, 246, 0.15) 100%);
        backdrop-filter: blur(20px) saturate(180%);
        -webkit-backdrop-filter: blur(20px) saturate(180%);
        border: 2px solid var(--glass-border);
        border-radius: 25px;
        padding: 4rem 3rem;
        text-align: center;
        margin: 2rem 0;
        color: white;
        box-shadow: 
            0 25px 50px -12px rgba(139, 92, 246, 0.5),
            0 0 0 1px rgba(255, 255, 255, 0.1),
            inset 0 1px 0 rgba(255, 255, 255, 0.1);
        position: relative;
        overflow: hidden;
        animation: headerPulse 6s ease-in-out infinite;
    }
    
    @keyframes headerPulse {
        0%, 100% { box-shadow: 0 25px 50px -12px rgba(139, 92, 246, 0.5), 0 0 30px rgba(139, 92, 246, 0.3); }
        50% { box-shadow: 0 25px 50px -12px rgba(6, 182, 212, 0.5), 0 0 30px rgba(6, 182, 212, 0.3); }
    }
    
    .mega-header::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: linear-gradient(45deg, 
            transparent 30%, 
            rgba(255, 255, 255, 0.1) 50%, 
            transparent 70%);
        transform: rotate(45deg);
        animation: headerShine 4s linear infinite;
        pointer-events: none;
    }
    
    @keyframes headerShine {
        0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
        100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
    }
    
    .mega-header h1 {
        font-family: 'Orbitron', monospace;
        font-size: 4.5rem;
        font-weight: 900;
        margin: 0;
        background: linear-gradient(135deg, #ffffff 0%, #8b5cf6 25%, #06b6d4 50%, #10b981 75%, #ffffff 100%);
        background-size: 300% 300%;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        animation: textGradient 3s ease infinite;
        text-shadow: 0 0 50px rgba(255, 255, 255, 0.3);
        position: relative;
        z-index: 2;
        letter-spacing: 2px;
    }
    
    @keyframes textGradient {
        0%, 100% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
    }
    
    .mega-header .subtitle {
        font-size: 1.5rem;
        font-weight: 300;
        margin: 1rem 0;
        opacity: 0.9;
        position: relative;
        z-index: 2;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        letter-spacing: 1px;
    }
    
    .mega-header .tech-badge {
        display: inline-block;
        background: rgba(139, 92, 246, 0.2);
        border: 1px solid rgba(139, 92, 246, 0.5);
        border-radius: 20px;
        padding: 0.5rem 1rem;
        margin: 0.25rem;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 1px;
        position: relative;
        z-index: 2;
        transition: all 0.3s ease;
    }
    
    .tech-badge:hover {
        background: rgba(139, 92, 246, 0.4);
        transform: translateY(-2px) scale(1.05);
        box-shadow: 0 5px 15px rgba(139, 92, 246, 0.4);
    }
    
    /* CARDS ULTRA PREMIUM COM EFEITOS 3D */
    .premium-metric-card {
        background: linear-gradient(145deg, 
            rgba(255, 255, 255, 0.1) 0%, 
            rgba(255, 255, 255, 0.05) 100%);
        backdrop-filter: blur(15px) saturate(200%);
        -webkit-backdrop-filter: blur(15px) saturate(200%);
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 20px;
        padding: 2.5rem 2rem;
        text-align: center;
        color: white;
        margin: 1rem 0;
        box-shadow: 
            0 20px 40px rgba(0, 0, 0, 0.2),
            0 15px 25px rgba(139, 92, 246, 0.1),
            inset 0 1px 0 rgba(255, 255, 255, 0.1),
            inset 0 -1px 0 rgba(0, 0, 0, 0.1);
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        position: relative;
        overflow: hidden;
        cursor: pointer;
    }
    
    .premium-metric-card::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
        transform: rotate(45deg);
        transition: all 0.6s ease;
        opacity: 0;
    }
    
    .premium-metric-card:hover::before {
        opacity: 1;
        animation: cardShine 0.6s ease-in-out;
    }
    
    @keyframes cardShine {
        0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
        100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
    }
    
    .premium-metric-card:hover {
        transform: translateY(-15px) rotateX(5deg) rotateY(5deg) scale(1.02);
        box-shadow: 
            0 30px 60px rgba(0, 0, 0, 0.3),
            0 25px 45px rgba(139, 92, 246, 0.2),
            0 0 30px rgba(139, 92, 246, 0.1);
        border-color: rgba(139, 92, 246, 0.5);
    }
    
    .premium-metric-value {
        font-family: 'Orbitron', monospace;
        font-size: 3.5rem;
        font-weight: 900;
        margin: 1rem 0;
        background: linear-gradient(135deg, #ffffff, #8b5cf6, #06b6d4);
        background-size: 300% 300%;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        animation: valueGradient 2s ease infinite, countUp 1s ease-out;
        text-shadow: 0 0 30px rgba(255, 255, 255, 0.2);
        position: relative;
        z-index: 2;
    }
    
    @keyframes valueGradient {
        0%, 100% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
    }
    
    @keyframes countUp {
        0% { transform: scale(0.5) rotateX(90deg); opacity: 0; }
        50% { transform: scale(1.1) rotateX(0deg); }
        100% { transform: scale(1) rotateX(0deg); opacity: 1; }
    }
    
    .premium-metric-label {
        font-size: 0.95rem;
        color: rgba(255, 255, 255, 0.8);
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 2px;
        margin-bottom: 1rem;
        position: relative;
        z-index: 2;
    }
    
    .premium-metric-trend {
        font-size: 0.85rem;
        color: rgba(255, 255, 255, 0.7);
        margin-top: 1rem;
        position: relative;
        z-index: 2;
        font-weight: 500;
    }
    
    .trend-positive { color: #10b981; }
    .trend-negative { color: #ef4444; }
    .trend-neutral { color: #f59e0b; }
    
    /* INSIGHT CARDS ULTRA FUTUR√çSTICOS */
    .ultra-insight-card {
        background: linear-gradient(145deg, 
            rgba(139, 92, 246, 0.15) 0%, 
            rgba(139, 92, 246, 0.05) 100%);
        backdrop-filter: blur(20px) saturate(180%);
        border: 2px solid rgba(139, 92, 246, 0.3);
        border-radius: 15px;
        padding: 2rem;
        margin: 1rem 0;
        color: white;
        border-left: 6px solid #8b5cf6;
        box-shadow: 
            0 15px 35px rgba(139, 92, 246, 0.2),
            inset 0 1px 0 rgba(255, 255, 255, 0.1);
        transition: all 0.4s cubic-bezier(0.23, 1, 0.32, 1);
        position: relative;
        overflow: hidden;
    }
    
    .ultra-insight-card::after {
        content: '';
        position: absolute;
        top: 0;
        right: 0;
        width: 100px;
        height: 100px;
        background: radial-gradient(circle, rgba(139, 92, 246, 0.3), transparent);
        border-radius: 50%;
        transform: translateX(50%) translateY(-50%);
        transition: all 0.4s ease;
    }
    
    .ultra-insight-card:hover {
        transform: translateX(10px) scale(1.02);
        box-shadow: 0 25px 50px rgba(139, 92, 246, 0.3);
        border-left-width: 8px;
    }
    
    .ultra-insight-card:hover::after {
        transform: translateX(50%) translateY(-50%) scale(1.5);
    }
    
    .ultra-insight-card h4 {
        font-family: 'Orbitron', monospace;
        color: #ffffff;
        margin-bottom: 1rem;
        font-size: 1.2rem;
        font-weight: 700;
    }
    
    .success-insight {
        background: linear-gradient(145deg, rgba(16, 185, 129, 0.15) 0%, rgba(16, 185, 129, 0.05) 100%);
        border-color: rgba(16, 185, 129, 0.3);
        border-left-color: #10b981;
        box-shadow: 0 15px 35px rgba(16, 185, 129, 0.2);
    }
    
    .warning-insight {
        background: linear-gradient(145deg, rgba(245, 158, 11, 0.15) 0%, rgba(245, 158, 11, 0.05) 100%);
        border-color: rgba(245, 158, 11, 0.3);
        border-left-color: #f59e0b;
        box-shadow: 0 15px 35px rgba(245, 158, 11, 0.2);
    }
    
    .critical-insight {
        background: linear-gradient(145deg, rgba(239, 68, 68, 0.15) 0%, rgba(239, 68, 68, 0.05) 100%);
        border-color: rgba(239, 68, 68, 0.3);
        border-left-color: #ef4444;
        box-shadow: 0 15px 35px rgba(239, 68, 68, 0.2);
    }
    
    /* T√çTULOS DE SE√á√ÉO ULTRA PREMIUM */
    .ultra-section-title {
        color: white;
        font-family: 'Orbitron', monospace;
        font-size: 2.5rem;
        font-weight: 900;
        text-align: center;
        margin: 4rem 0 2rem 0;
        background: linear-gradient(135deg, #ffffff 0%, #8b5cf6 50%, #06b6d4 100%);
        background-size: 200% 200%;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        animation: titleGradient 3s ease infinite;
        position: relative;
        text-shadow: 0 0 50px rgba(255, 255, 255, 0.3);
        letter-spacing: 3px;
        text-transform: uppercase;
    }
    
    @keyframes titleGradient {
        0%, 100% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
    }
    
    .ultra-section-title::after {
        content: '';
        position: absolute;
        bottom: -15px;
        left: 50%;
        transform: translateX(-50%);
        width: 200px;
        height: 4px;
        background: linear-gradient(90deg, transparent, #8b5cf6, #06b6d4, #10b981, transparent);
        border-radius: 2px;
        animation: lineGlow 2s ease infinite;
    }
    
    @keyframes lineGlow {
        0%, 100% { box-shadow: 0 0 5px #8b5cf6; }
        50% { box-shadow: 0 0 20px #06b6d4, 0 0 30px #06b6d4; }
    }
    
    /* BOT√ïES FUTUR√çSTICOS PREMIUM */
    .stButton > button {
        background: linear-gradient(135deg, #8b5cf6 0%, #06b6d4 100%) !important;
        color: white !important;
        border: 2px solid rgba(255, 255, 255, 0.2) !important;
        border-radius: 15px !important;
        padding: 1rem 2rem !important;
        font-weight: 700 !important;
        font-size: 0.95rem !important;
        text-transform: uppercase !important;
        letter-spacing: 1px !important;
        transition: all 0.4s cubic-bezier(0.23, 1, 0.32, 1) !important;
        box-shadow: 
            0 10px 25px rgba(139, 92, 246, 0.3),
            inset 0 1px 0 rgba(255, 255, 255, 0.2) !important;
        position: relative !important;
        overflow: hidden !important;
        backdrop-filter: blur(10px) !important;
    }
    
    .stButton > button::before {
        content: '' !important;
        position: absolute !important;
        top: -50% !important;
        left: -50% !important;
        width: 200% !important;
        height: 200% !important;
        background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent) !important;
        transform: rotate(45deg) !important;
        transition: all 0.6s ease !important;
        opacity: 0 !important;
    }
    
    .stButton > button:hover {
        transform: translateY(-5px) scale(1.05) !important;
        box-shadow: 
            0 20px 40px rgba(139, 92, 246, 0.4),
            0 0 30px rgba(6, 182, 212, 0.3) !important;
        border-color: rgba(255, 255, 255, 0.4) !important;
        background: linear-gradient(135deg, #7c3aed 0%, #0891b2 100%) !important;
    }
    
    .stButton > button:hover::before {
        opacity: 1 !important;
        animation: buttonShine 0.6s ease-in-out !important;
    }
    
    @keyframes buttonShine {
        0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
        100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
    }
    
    .stButton > button:active {
        transform: translateY(-2px) scale(0.98) !important;
    }
    
    /* SIDEBAR FUTUR√çSTICA */
    .css-1d391kg {
        background: linear-gradient(180deg, 
            rgba(15, 23, 42, 0.95) 0%, 
            rgba(30, 41, 59, 0.95) 50%,
            rgba(15, 23, 42, 0.95) 100%) !important;
        backdrop-filter: blur(20px) !important;
        border-right: 2px solid rgba(139, 92, 246, 0.3) !important;
        box-shadow: 0 0 50px rgba(139, 92, 246, 0.1) !important;
    }
    
    /* FORMUL√ÅRIOS FUTUR√çSTICOS */
    .stSelectbox > div > div,
    .stMultiSelect > div > div,
    .stDateInput > div > div > input {
        background: rgba(255, 255, 255, 0.1) !important;
        backdrop-filter: blur(10px) !important;
        border: 2px solid rgba(255, 255, 255, 0.2) !important;
        border-radius: 10px !important;
        color: white !important;
        transition: all 0.3s ease !important;
    }
    
    .stSelectbox > div > div:hover,
    .stMultiSelect > div > div:hover {
        border-color: rgba(139, 92, 246, 0.5) !important;
        box-shadow: 0 0 15px rgba(139, 92, 246, 0.2) !important;
    }
    
    /* TABELA PREMIUM */
    .stDataFrame {
        background: rgba(255, 255, 255, 0.05) !important;
        backdrop-filter: blur(15px) !important;
        border-radius: 15px !important;
        border: 2px solid rgba(255, 255, 255, 0.1) !important;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2) !important;
        overflow: hidden !important;
    }
    
    /* LOADING ULTRA PREMIUM */
    .premium-loading {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        height: 300px;
        color: white;
    }
    
    .premium-spinner {
        width: 80px;
        height: 80px;
        border: 4px solid rgba(139, 92, 246, 0.3);
        border-top: 4px solid #8b5cf6;
        border-radius: 50%;
        animation: premiumSpin 1s linear infinite;
        margin-bottom: 2rem;
        box-shadow: 0 0 30px rgba(139, 92, 246, 0.5);
    }
    
    @keyframes premiumSpin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .loading-text {
        font-family: 'Orbitron', monospace;
        font-size: 1.5rem;
        font-weight: 700;
        background: linear-gradient(135deg, #8b5cf6, #06b6d4);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        animation: loadingPulse 2s ease infinite;
    }
    
    @keyframes loadingPulse {
        0%, 100% { opacity: 0.7; }
        50% { opacity: 1; }
    }
    
    /* INDICADORES DE STATUS PREMIUM */
    .status-indicator {
        display: inline-block;
        width: 15px;
        height: 15px;
        border-radius: 50%;
        margin-right: 10px;
        position: relative;
        box-shadow: 0 0 10px currentColor;
    }
    
    .status-online {
        background: #10b981;
        animation: statusPulse 2s ease infinite;
    }
    
    .status-warning {
        background: #f59e0b;
        animation: statusPulse 2s ease infinite;
    }
    
    .status-critical {
        background: #ef4444;
        animation: statusPulse 2s ease infinite;
    }
    
    @keyframes statusPulse {
        0% { 
            box-shadow: 0 0 0 0 currentColor;
            transform: scale(1);
        }
        70% { 
            box-shadow: 0 0 0 10px transparent;
            transform: scale(1.1);
        }
        100% { 
            box-shadow: 0 0 0 0 transparent;
            transform: scale(1);
        }
    }
    
    /* TABS ULTRA FUTUR√çSTICAS */
    .stTabs [data-baseweb="tab-list"] {
        gap: 30px !important;
        background: rgba(255, 255, 255, 0.05) !important;
        backdrop-filter: blur(15px) !important;
        border-radius: 15px !important;
        padding: 10px !important;
        border: 2px solid rgba(255, 255, 255, 0.1) !important;
    }
    
    .stTabs [data-baseweb="tab"] {
        background: rgba(255, 255, 255, 0.1) !important;
        backdrop-filter: blur(10px) !important;
        border-radius: 10px !important;
        color: rgba(255, 255, 255, 0.8) !important;
        font-weight: 700 !important;
        padding: 15px 30px !important;
        transition: all 0.4s cubic-bezier(0.23, 1, 0.32, 1) !important;
        border: 2px solid transparent !important;
        text-transform: uppercase !important;
        letter-spacing: 1px !important;
        font-family: 'Orbitron', monospace !important;
    }
    
    .stTabs [aria-selected="true"] {
        background: linear-gradient(135deg, #8b5cf6, #06b6d4) !important;
        color: white !important;
        box-shadow: 
            0 10px 25px rgba(139, 92, 246, 0.4),
            inset 0 1px 0 rgba(255, 255, 255, 0.2) !important;
        border-color: rgba(255, 255, 255, 0.3) !important;
        transform: translateY(-2px) !important;
    }
    
    /* RESPONSIVIDADE PREMIUM */
    @media (max-width: 768px) {
        .mega-header h1 {
            font-size: 2.5rem;
        }
        
        .premium-metric-value {
            font-size: 2rem;
        }
        
        .ultra-section-title {
            font-size: 1.8rem;
        }
        
        .premium-metric-card {
            padding: 1.5rem 1rem;
        }
    }
    
    /* ESCONDER ELEMENTOS STREAMLIT */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    .stDeployButton {visibility: hidden;}
    header {visibility: hidden;}
    
    /* SCROLLBAR PERSONALIZADA */
    ::-webkit-scrollbar {
        width: 10px;
    }
    
    ::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb {
        background: linear-gradient(135deg, #8b5cf6, #06b6d4);
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(139, 92, 246, 0.5);
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(135deg, #7c3aed, #0891b2);
    }
</style>
""", unsafe_allow_html=True)

# üöÄ SISTEMA DE CACHE AVAN√áADO
@st.cache_data(ttl=300, show_spinner=False)
def generate_premium_dataset() -> pd.DataFrame:
    """Gera dataset ultra-realista para demonstra√ß√£o premium"""
    random.seed(42)
    np.random.seed(42)
    
    # Dados corporativos realistas
    departamentos = [
        'Tecnologia da Informa√ß√£o', 'Recursos Humanos', 'Opera√ß√µes Industriais',
        'Financeiro e Controladoria', 'Marketing Digital', 'Vendas Corporativas', 
        'Log√≠stica Integrada', 'Qualidade e Processos', 'Jur√≠dico Empresarial'
    ]
    
    estados_brasileiros = [
        'SP', 'RJ', 'MG', 'RS', 'PR', 'SC', 'BA', 'PE', 'GO', 'DF',
        'ES', 'PB', 'RN', 'CE', 'AL', 'SE', 'PI', 'MA', 'TO', 'MT'
    ]
    
    motivos_ausencia = [
        'Consulta M√©dica', 'Doen√ßa Familiar', 'Compromissos Pessoais',
        'Atestado M√©dico', 'Emerg√™ncia Familiar', 'Problemas de Transporte',
        'Quest√µes de Sa√∫de Mental', 'Acompanhamento M√©dico', 'Licen√ßa Maternidade',
        'Acidente de Trabalho', 'Sem Justificativa', 'Home Office'
    ]
    
    cargos_hierarquia = [
        'Estagi√°rio', 'Assistente', 'Analista Jr', 'Analista Pleno', 
        'Analista S√™nior', 'Especialista', 'Coordenador', 'Supervisor',
        'Gerente', 'Gerente S√™nior', 'Diretor', 'Vice-Presidente'
    ]
    
    nomes_brasileiros = [
        'Ana Silva', 'Jo√£o Santos', 'Maria Oliveira', 'Pedro Costa', 'Carla Souza',
        'Bruno Almeida', 'Fernanda Lima', 'Rafael Pereira', 'Juliana Rodrigues',
        'Thiago Ferreira', 'Camila Martins', 'Lucas Barbosa', 'Patr√≠cia Gomes',
        'Andr√© Ribeiro', 'Roberta Carvalho', 'Felipe Ara√∫jo', 'Vanessa Castro',
        'Rodrigo Nunes', 'Priscila Dias', 'Gustavo Moreira'
    ]
    
    dados_corporativos = []
    base_date = datetime(2024, 1, 1)
    
    # Gerar 500 registros ultra-realistas
    for i in range(500):
        # Distribui√ß√£o inteligente por departamento (alguns mais cr√≠ticos)
        dept_weights = [0.18, 0.08, 0.15, 0.10, 0.12, 0.14, 0.13, 0.06, 0.04]
        departamento = np.random.choice(departamentos, p=dept_weights)
        
        # Motivos baseados em realidade corporativa
        if departamento == 'Tecnologia da Informa√ß√£o':
            motivo_weights = [0.15, 0.10, 0.20, 0.15, 0.08, 0.05, 0.15, 0.05, 0.02, 0.03, 0.02, 0.00]
        elif departamento == 'Opera√ß√µes Industriais':
            motivo_weights = [0.12, 0.08, 0.15, 0.25, 0.10, 0.08, 0.05, 0.07, 0.02, 0.05, 0.03, 0.00]
        else:
            motivo_weights = [0.16, 0.12, 0.18, 0.20, 0.08, 0.06, 0.08, 0.06, 0.02, 0.02, 0.02, 0.00]
        
        motivo = np.random.choice(motivos_ausencia, p=motivo_weights)
        
        # Sistema inteligente de justifica√ß√£o
        justificacao_prob = {
            'Consulta M√©dica': 0.95, 'Atestado M√©dico': 0.98, 'Emerg√™ncia Familiar': 0.85,
            'Doen√ßa Familiar': 0.80, 'Acidente de Trabalho': 1.00, 'Licen√ßa Maternidade': 1.00,
            'Acompanhamento M√©dico': 0.90, 'Quest√µes de Sa√∫de Mental': 0.75,
            'Problemas de Transporte': 0.60, 'Compromissos Pessoais': 0.45,
            'Home Office': 0.95, 'Sem Justificativa': 0.00
        }
        
        justificada = 'Sim' if random.random() < justificacao_prob.get(motivo, 0.70) else 'N√£o'
        
        # Distribui√ß√£o temporal inteligente (mais faltas em alguns per√≠odos)
        month_weights = [0.12, 0.08, 0.10, 0.09, 0.08, 0.07, 0.06, 0.08, 0.09, 0.10, 0.08, 0.05]  # Dezembro menor
        mes = np.random.choice(range(1, 13), p=month_weights)
        dia = random.randint(1, 28)  # Evitar problemas com dias do m√™s
        
        data_falta = datetime(2024, mes, dia)
        
        # Hierarquia salarial realista
        cargo = random.choice(cargos_hierarquia)
        salario_base = {
            'Estagi√°rio': (1200, 2000), 'Assistente': (2500, 3500),
            'Analista Jr': (3500, 5500), 'Analista Pleno': (5500, 8000),
            'Analista S√™nior': (8000, 12000), 'Especialista': (10000, 15000),
            'Coordenador': (12000, 18000), 'Supervisor': (15000, 22000),
            'Gerente': (18000, 30000), 'Gerente S√™nior': (25000, 40000),
            'Diretor': (35000, 60000), 'Vice-Presidente': (50000, 100000)
        }
        
        salario_min, salario_max = salario_base.get(cargo, (3000, 8000))
        salario = random.randint(salario_min, salario_max)
        
        # G√™nero e nome correspondente
        genero = random.choice(['M', 'F'])
        nome = f"{random.choice(nomes_brasileiros)} {i+1:03d}"
        
        # Data de admiss√£o realista
        anos_empresa = np.random.choice([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 
                                       p=[0.15, 0.20, 0.15, 0.12, 0.10, 0.08, 0.07, 0.05, 0.04, 0.03, 0.01])
        data_admissao = base_date - timedelta(days=anos_empresa * 365 + random.randint(0, 365))
        
        dados_corporativos.append({
            'ID_Funcionario': f"EMP{i+1:04d}",
            'Nome_Completo': nome,
            'Cargo_Atual': cargo,
            'Departamento': departamento,
            'Estado_UF': random.choice(estados_brasileiros),
            'Data_Ausencia': data_falta,
            'Motivo_Ausencia': motivo,
            'Status_Justificativa': justificada,
            'Genero': genero,
            'Data_Admissao': data_admissao,
            'Salario_Atual': salario,
            'Nivel_Hierarquico': cargos_hierarquia.index(cargo),
            'Criticidade_Ausencia': 'Alta' if motivo in ['Sem Justificativa', 'Problemas de Transporte'] else 
                                   'M√©dia' if motivo in ['Compromissos Pessoais'] else 'Baixa'
        })
    
    df = pd.DataFrame(dados_corporativos)
    
    # Processamento avan√ßado de dados
    df['Mes_Referencia'] = df['Data_Ausencia'].dt.strftime('%Y-%m')
    df['Mes_Nome_BR'] = df['Data_Ausencia'].dt.strftime('%b/%Y')
    df['Dia_Semana_BR'] = df['Data_Ausencia'].dt.day_name().map({
        'Monday': 'Segunda-feira', 'Tuesday': 'Ter√ßa-feira', 'Wednesday': 'Quarta-feira',
        'Thursday': 'Quinta-feira', 'Friday': 'Sexta-feira', 'Saturday': 'S√°bado', 'Sunday': 'Domingo'
    })
    df['Trimestre'] = df['Data_Ausencia'].dt.quarter
    df['Semestre'] = df['Data_Ausencia'].dt.month.apply(lambda x: 1 if x <= 6 else 2)
    df['Anos_Empresa'] = ((datetime.now() - df['Data_Admissao']).dt.days / 365).astype(int).clip(0, 50)
    df['Faixa_Salarial'] = pd.cut(df['Salario_Atual'], 
                                  bins=[0, 5000, 10000, 20000, 50000, 100000],
                                  labels=['At√© 5k', '5k-10k', '10k-20k', '20k-50k', '50k+'])
    df['Indice_Rotatividade'] = df['Anos_Empresa'].apply(lambda x: 'Alto' if x < 2 else 'M√©dio' if x < 5 else 'Baixo')
    
    return df

@st.cache_data(ttl=300)
def calculate_premium_metrics(df: pd.DataFrame) -> Dict:
    """Calcula m√©tricas avan√ßadas com KPIs corporativos"""
    if len(df) == 0:
        return {
            'total_ausencias': 0, 'funcionarios_impactados': 0, 'taxa_justificacao': 0,
            'departamentos_criticos': 0, 'impacto_financeiro': 0, 'salario_medio': 0,
            'ausencias_por_funcionario': 0, 'taxa_absenteismo': 0, 'pico_temporal': 'N/A',
            'tendencia_geral': 'Est√°vel', 'indice_criticidade': 'Baixo', 'score_rh': 85
        }
    
    total_ausencias = len(df)
    funcionarios_impactados = df['Nome_Completo'].nunique()
    ausencias_justificadas = len(df[df['Status_Justificativa'] == 'Sim'])
    taxa_justificacao = round((ausencias_justificadas / total_ausencias * 100), 2)
    departamentos_criticos = df['Departamento'].nunique()
    
    # M√©tricas financeiras avan√ßadas
    custo_medio_ausencia = 280  # R$ por aus√™ncia (baseado em produtividade perdida)
    impacto_financeiro = total_ausencias * custo_medio_ausencia
    salario_medio = df['Salario_Atual'].mean()
    
    # KPIs de RH avan√ßados
    ausencias_por_funcionario = round(total_ausencias / funcionarios_impactados, 2)
    taxa_absenteismo = round((total_ausencias / (funcionarios_impactados * 22)) * 100, 2)
    
    # An√°lise temporal inteligente
    pico_temporal = df['Mes_Nome_BR'].value_counts().index[0] if len(df) > 0 else 'N/A'
    
    # √çndice de criticidade corporativa
    ausencias_criticas = len(df[df['Criticidade_Ausencia'] == 'Alta'])
    indice_criticidade = 'Alto' if ausencias_criticas > total_ausencias * 0.3 else \
                        'M√©dio' if ausencias_criticas > total_ausencias * 0.15 else 'Baixo'
    
    # Score de RH (0-100)
    score_base = 100
    score_base -= max(0, (taxa_absenteismo - 3) * 5)  # Penalidade por alta taxa
    score_base -= max(0, (100 - taxa_justificacao) * 0.3)  # Penalidade por baixa justifica√ß√£o
    score_base -= ausencias_criticas * 0.5  # Penalidade por criticidade
    score_rh = max(0, min(100, round(score_base)))
    
    # Tend√™ncia baseada em an√°lise temporal
    if len(df) >= 10:
        dados_recentes = df.sort_values('Data_Ausencia').tail(30)
        dados_anteriores = df.sort_values('Data_Ausencia').iloc[:-30] if len(df) > 30 else df.head(10)
        
        media_recente = len(dados_recentes) / max(1, dados_recentes['Data_Ausencia'].nunique())
        media_anterior = len(dados_anteriores) / max(1, dados_anteriores['Data_Ausencia'].nunique())
        
        if media_recente > media_anterior * 1.15:
            tendencia_geral = 'Crescente Preocupante'
        elif media_recente > media_anterior * 1.05:
            tendencia_geral = 'Crescente Leve'
        elif media_recente < media_anterior * 0.85:
            tendencia_geral = 'Decrescente Positiva'
        elif media_recente < media_anterior * 0.95:
            tendencia_geral = 'Decrescente Leve'
        else:
            tendencia_geral = 'Est√°vel'
    else:
        tendencia_geral = 'Dados Insuficientes'
    
    return {
        'total_ausencias': total_ausencias,
        'funcionarios_impactados': funcionarios_impactados,
        'taxa_justificacao': taxa_justificacao,
        'departamentos_criticos': departamentos_criticos,
        'impacto_financeiro': impacto_financeiro,
        'salario_medio': salario_medio,
        'ausencias_por_funcionario': ausencias_por_funcionario,
        'taxa_absenteismo': taxa_absenteismo,
        'pico_temporal': pico_temporal,
        'tendencia_geral': tendencia_geral,
        'indice_criticidade': indice_criticidade,
        'score_rh': score_rh,
        'ausencias_criticas': ausencias_criticas
    }

def create_ultra_plotly_theme() -> Dict:
    """Tema ultra-futur√≠stico para gr√°ficos Plotly"""
    return {
        'layout': {
            'plot_bgcolor': 'rgba(0,0,0,0)',
            'paper_bgcolor': 'rgba(0,0,0,0)',
            'font': {
                'color': 'white', 
                'family': 'Inter, sans-serif',
                'size': 12,
                'weight': 600
            },
            'title': {
                'font': {'size': 20, 'color': 'white', 'family': 'Orbitron, monospace'},
                'x': 0.5,
                'xanchor': 'center',
                'pad': {'t': 20}
            },
            'xaxis': {
                'gridcolor': 'rgba(139, 92, 246, 0.2)',
                'linecolor': 'rgba(255, 255, 255, 0.3)',
                'tickcolor': 'rgba(255, 255, 255, 0.3)',
                'tickfont': {'color': 'rgba(255, 255, 255, 0.9)', 'size': 11, 'family': 'Inter'},
                'titlefont': {'color': 'white', 'size': 14, 'family': 'Inter'}
            },
            'yaxis': {
                'gridcolor': 'rgba(139, 92, 246, 0.2)',
                'linecolor': 'rgba(255, 255, 255, 0.3)',
                'tickcolor': 'rgba(255, 255, 255, 0.3)',
                'tickfont': {'color': 'rgba(255, 255, 255, 0.9)', 'size': 11, 'family': 'Inter'},
                'titlefont': {'color': 'white', 'size': 14, 'family': 'Inter'}
            },
            'legend': {
                'font': {'color': 'white', 'size': 11, 'family': 'Inter'},
                'bgcolor': 'rgba(255, 255, 255, 0.05)',
                'bordercolor': 'rgba(139, 92, 246, 0.3)',
                'borderwidth': 2,
                'x': 1, 'y': 1,
                'xanchor': 'right', 'yanchor': 'top'
            },
            'colorway': [
                '#8b5cf6', '#06b6d4', '#10b981', '#f59e0b', '#ef4444', 
                '#8b5a2b', '#6366f1', '#ec4899', '#14b8a6', '#f97316'
            ],
            'margin': dict(l=40, r=40, t=60, b=40)
        }
    }

def display_ultra_loading():
    """Anima√ß√£o de loading ultra premium"""
    loading_placeholder = st.empty()
    with loading_placeholder.container():
        st.markdown("""
        <div class="premium-loading">
            <div class="premium-spinner"></div>
            <div class="loading-text">Iniciando HR Analytics Intelligence Suite...</div>
            <p style="color: rgba(255,255,255,0.6); margin-top: 1rem; font-family: 'Inter';">
                Processando 500+ registros corporativos com IA avan√ßada
            </p>
        </div>
        """, unsafe_allow_html=True)
        time.sleep(2.5)
    loading_placeholder.empty()

def create_advanced_chart(df: pd.DataFrame, chart_type: str, **kwargs) -> go.Figure:
    """Factory para cria√ß√£o de gr√°ficos ultra-avan√ßados"""
    theme = create_ultra_plotly_theme()
    
    if chart_type == "departmental_analysis":
        dept_data = df['Departamento'].value_counts().head(8)
        
        fig = px.bar(
            x=dept_data.values,
            y=dept_data.index,
            orientation='h',
            title="üè¢ An√°lise Cr√≠tica Departamental",
            color=dept_data.values,
            color_continuous_scale=['#ef4444', '#f59e0b', '#8b5cf6', '#06b6d4', '#10b981']
        )
        
        fig.update_traces(
            hovertemplate='<b>%{y}</b><br>Aus√™ncias: %{x}<br>Impacto: R$ %{customdata:,.0f}<extra></extra>',
            customdata=dept_data.values * 280,
            textposition='outside',
            texttemplate='%{x}',
            textfont=dict(size=14, color='white', family='Orbitron')
        )
        
        fig.update_layout(**theme['layout'])
        fig.update_layout(height=500, showlegend=False)
        fig.update_coloraxes(showscale=False)
        
        return fig
    
    elif chart_type == "motivos_premium":
        motivo_data = df['Motivo_Ausencia'].value_counts().head(8)
        
        fig = px.pie(
            values=motivo_data.values,
            names=motivo_data.index,
            title="üéØ Distribui√ß√£o Inteligente de Motivos",
            color_discrete_sequence=['#8b5cf6', '#06b6d4', '#10b981', '#f59e0b', '#ef4444', '#ec4899', '#14b8a6', '#f97316']
        )
        
        fig.update_traces(
            textinfo='percent+label',
            textfont_size=12,
            textfont_color='white',
            textfont_family='Inter',
            hovertemplate='<b>%{label}</b><br>Casos: %{value}<br>Percentual: %{percent}<br>Impacto: R$ %{customdata:,.0f}<extra></extra>',
            customdata=motivo_data.values * 280,
            marker=dict(
                line=dict(color='rgba(255,255,255,0.4)', width=3),
                opacity=0.9
            ),
            pull=[0.05 if i == 0 else 0 for i in range(len(motivo_data))]
        )
        
        fig.update_layout(**theme['layout'])
        fig.update_layout(height=500)
        
        return fig
    
    elif chart_type == "timeline_advanced":
        timeline_data = df.groupby(['Mes_Nome_BR']).size().reset_index(name='Ausencias')
        timeline_data['Data_Ordenacao'] = pd.to_datetime(timeline_data['Mes_Nome_BR'], format='%b/%Y')
        timeline_data = timeline_data.sort_values('Data_Ordenacao')
        
        # Adicionar m√©dia m√≥vel
        timeline_data['Media_Movel'] = timeline_data['Ausencias'].rolling(window=3, center=True).mean()
        
        fig = make_subplots(
            rows=1, cols=1,
            subplot_titles=['üìà Evolu√ß√£o Temporal Inteligente com Predi√ß√£o IA']
        )
        
        # Dados reais
        fig.add_trace(
            go.Scatter(
                x=timeline_data['Mes_Nome_BR'],
                y=timeline_data['Ausencias'],
                mode='lines+markers',
                name='Aus√™ncias Reais',
                line=dict(color='#8b5cf6', width=4, shape='spline'),
                marker=dict(
                    color='#06b6d4', 
                    size=12, 
                    line=dict(width=3, color='white'),
                    symbol='circle'
                ),
                hovertemplate='<b>%{x}</b><br>Aus√™ncias: %{y}<br>Impacto: R$ %{customdata:,.0f}<extra></extra>',
                customdata=timeline_data['Ausencias'] * 280
            )
        )
        
        # M√©dia m√≥vel
        fig.add_trace(
            go.Scatter(
                x=timeline_data['Mes_Nome_BR'],
                y=timeline_data['Media_Movel'],
                mode='lines',
                name='Tend√™ncia (IA)',
                line=dict(color='#10b981', width=3, dash='dash'),
                hovertemplate='<b>%{x}</b><br>Tend√™ncia: %{y:.1f}<extra></extra>'
            )
        )
        
        fig.update_layout(**theme['layout'])
        fig.update_layout(height=400)
        
        return fig
    
    elif chart_type == "correlation_matrix":
        # Criar matriz de correla√ß√£o avan√ßada
        corr_data = df.groupby('Nome_Completo').agg({
            'Salario_Atual': 'first',
            'Anos_Empresa': 'first',
            'Nivel_Hierarquico': 'first',
            'Data_Ausencia': 'count'
        }).reset_index()
        corr_data.columns = ['Nome', 'Salario', 'Anos_Empresa', 'Nivel_Hierarquico', 'Total_Ausencias']
        
        fig = px.scatter(
            corr_data,
            x='Salario',
            y='Total_Ausencias',
            size='Anos_Empresa',
            color='Nivel_Hierarquico',
            title="üîó Matriz de Correla√ß√£o Multidimensional",
            color_continuous_scale='Viridis',
            hover_data=['Nome']
        )
        
        fig.update_traces(
            hovertemplate='<b>%{customdata[0]}</b><br>Sal√°rio: R$ %{x:,.0f}<br>Aus√™ncias: %{y}<br>Anos: %{marker.size}<br>N√≠vel: %{marker.color}<extra></extra>'
        )
        
        fig.update_layout(**theme['layout'])
        fig.update_layout(height=500)
        
        return fig

def main():
    """Fun√ß√£o principal ultra-premium"""
    
    # Loading inicial ultra-premium
    if 'premium_loaded' not in st.session_state:
        display_ultra_loading()
        st.session_state.premium_loaded = True
    
    # Header mega futur√≠stico
    st.markdown("""
    <div class="mega-header">
        <h1>üöÄ HR ANALYTICS INTELLIGENCE SUITE</h1>
        <p class="subtitle">Plataforma Avan√ßada de An√°lise Corporativa com Intelig√™ncia Artificial</p>
        <div style="margin-top: 2rem;">
            <span class="tech-badge">Machine Learning</span>
            <span class="tech-badge">Real-time Analytics</span>
            <span class="tech-badge">Predictive AI</span>
            <span class="tech-badge">Business Intelligence</span>
            <span class="tech-badge">Corporate Dashboard</span>
        </div>
        <div style="margin-top: 1.5rem;">
            <span class="status-indicator status-online"></span>
            <span style="font-size: 0.95rem; font-family: 'Orbitron', monospace;">SISTEMA OPERACIONAL | DADOS SINCRONIZADOS</span>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Carregamento de dados premium
    with st.spinner(""):
        df = generate_premium_dataset()
    
    if len(df) == 0:
        st.error("‚ùå Falha cr√≠tica no sistema de dados. Contacte o administrador.")
        return
    
    # Notifica√ß√£o de sucesso ultra-premium
    st.success(f"‚úÖ **{len(df)} registros corporativos** processados com sucesso! üéØ Sistema de IA ativo e otimizado.")
    
    # Sidebar ultra-futur√≠stica
    with st.sidebar:
        st.markdown("""
        <div style="text-align: center; padding: 2rem 0;">
            <h2 style="color: white; font-family: 'Orbitron', monospace; font-size: 1.5rem;">
                üîß CENTRO DE CONTROLE
            </h2>
            <p style="color: rgba(255,255,255,0.7); font-size: 0.9rem;">Configure sua an√°lise avan√ßada</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Filtros ultra-avan√ßados
        st.markdown("### üè¢ **Filtros Departamentais**")
        departamentos_selecionados = st.multiselect(
            "Selecione os departamentos para an√°lise:",
            options=sorted(df['Departamento'].unique()),
            default=sorted(df['Departamento'].unique()),
            help="üéØ Filtragem inteligente por departamentos cr√≠ticos"
        )
        
        st.markdown("### üìù **An√°lise de Motivos**")
        motivos_selecionados = st.multiselect(
            "Motivos de aus√™ncia para investiga√ß√£o:",
            options=sorted(df['Motivo_Ausencia'].unique()),
            default=sorted(df['Motivo_Ausencia'].unique()),
            help="üîç Classifica√ß√£o autom√°tica por criticidade"
        )
        
        st.markdown("### ‚úÖ **Status de Conformidade**")
        justificacao_filtro = st.selectbox(
            "An√°lise de justificativas corporativas:",
            options=['Todas', 'Sim', 'N√£o'],
            help="üìä KPI de conformidade organizacional"
        )
        
        st.markdown("### üë• **Segmenta√ß√£o Demogr√°fica**")
        genero_filtro = st.selectbox(
            "An√°lise por g√™nero:",
            options=['Todos', 'M', 'F'],
            help="üìà Insights de diversidade corporativa"
        )
        
        st.markdown("### üìÖ **Per√≠odo de An√°lise Premium**")
        try:
            col1, col2 = st.columns(2)
            with col1:
                data_inicio = st.date_input(
                    "In√≠cio:",
                    value=df['Data_Ausencia'].min().date(),
                    help="üìÖ Data inicial da an√°lise"
                )
            with col2:
                data_fim = st.date_input(
                    "Fim:",
                    value=df['Data_Ausencia'].max().date(),
                    help="üìÖ Data final da an√°lise"
                )
        except:
            data_inicio = datetime.now().date()
            data_fim = datetime.now().date()
        
        st.markdown("### ‚öôÔ∏è **Configura√ß√µes Avan√ßadas**")
        
        faixa_salarial = st.select_slider(
            "üí∞ Faixa Salarial de Interesse:",
            options=['Todas', 'At√© 5k', '5k-10k', '10k-20k', '20k-50k', '50k+'],
            value='Todas',
            help="üíº An√°lise por segmento salarial"
        )
        
        nivel_criticidade = st.selectbox(
            "‚ö†Ô∏è N√≠vel de Criticidade:",
            options=['Todos', 'Alta', 'M√©dia', 'Baixa'],
            help="üö® Filtro por impacto organizacional"
        )
    
    # Aplica√ß√£o de filtros ultra-inteligente
    try:
        df_filtrado = df.copy()
        
        if departamentos_selecionados:
            df_filtrado = df_filtrado[df_filtrado['Departamento'].isin(departamentos_selecionados)]
        
        if motivos_selecionados:
            df_filtrado = df_filtrado[df_filtrado['Motivo_Ausencia'].isin(motivos_selecionados)]
        
        if justificacao_filtro != 'Todas':
            df_filtrado = df_filtrado[df_filtrado['Status_Justificativa'] == justificacao_filtro]
        
        if genero_filtro != 'Todos':
            df_filtrado = df_filtrado[df_filtrado['Genero'] == genero_filtro]
        
        if faixa_salarial != 'Todas':
            df_filtrado = df_filtrado[df_filtrado['Faixa_Salarial'] == faixa_salarial]
        
        if nivel_criticidade != '
